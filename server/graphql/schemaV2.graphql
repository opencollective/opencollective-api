"""
Exposes a URL that specifies the behaviour of this scalar.
"""
directive @specifiedBy(
  """
  The URL that specifies the behaviour of this scalar.
  """
  url: String!
) on SCALAR

"""
Account interface shared by all kind of accounts (Bot, Collective, Event, User, Organization)
"""
interface Account {
  """
  The public id identifying the account (ie: 5v08jk63-w4g9nbpz-j7qmyder-p7ozax5g)
  """
  id: String

  """
  The internal database identifier of the collective (ie: 580)
  """
  legacyId: Int @deprecated(reason: "2020-01-01: should only be used during the transition to GraphQL API v2.")

  """
  The slug identifying the account (ie: babel)
  """
  slug: String

  """
  The type of the account (BOT/COLLECTIVE/EVENT/ORGANIZATION/INDIVIDUAL/VENDOR)
  """
  type: AccountType
  name: String
  description: String
  longDescription: String
  tags: [String]
  website: String
  twitterHandle: String
  githubHandle: String
  currency: String
  expensePolicy: String

  """
  Defines if the contributors wants to be incognito (name not displayed)
  """
  isIncognito: Boolean!
  imageUrl(height: Int, format: ImageFormat): String
  backgroundImageUrl(height: Int, format: ImageFormat): String

  """
  The time of creation
  """
  createdAt: DateTime

  """
  The time of last update
  """
  updatedAt: DateTime

  """
  Returns whether this account is archived
  """
  isArchived: Boolean

  """
  Returns whether the account accepts financial contributions.
  """
  isActive: Boolean

  """
  Returns whether the account is setup to Host collectives.
  """
  isHost: Boolean

  """
  Returns true if the remote user is an admin of this account
  """
  isAdmin: Boolean!
  members(
    limit: Int = 100
    offset: Int = 0
    role: [MemberRole]

    """
    Admin only. To filter on the email address of a member, useful to check if a member exists.
    """
    email: EmailAddress

    """
    Type of accounts (BOT/COLLECTIVE/EVENT/ORGANIZATION/INDIVIDUAL)
    """
    accountType: [AccountType]
  ): MemberCollection
  memberOf(
    limit: Int = 100
    offset: Int = 0
    role: [MemberRole]

    """
    Filter on (un)approved collectives
    """
    isApproved: Boolean

    """
    Filter on archived collectives
    """
    isArchived: Boolean

    """
    Type of accounts (BOT/COLLECTIVE/EVENT/ORGANIZATION/INDIVIDUAL)
    """
    accountType: [AccountType]

    """
    Specific account to query the membership of.
    """
    account: AccountReferenceInput
    orderBy: ChronologicalOrderInput! = { field: CREATED_AT, direction: DESC }
  ): MemberOfCollection
  transactions(
    limit: Int = 100
    offset: Int = 0

    """
    Type of transaction (DEBIT/CREDIT)
    """
    type: TransactionType
    orderBy: ChronologicalOrderInput

    """
    If the account is a user and this field is true, contributions from the
    incognito profile will be included too (admins only)
    """
    includeIncognitoTransactions: Boolean! = false
  ): TransactionCollection
  orders(
    limit: Int = 100
    offset: Int = 0
    filter: AccountOrdersFilter
    status: [OrderStatus]
    tierSlug: String

    """
    Only returns orders that have an subscription (monthly/yearly)
    """
    onlySubscriptions: Boolean

    """
    Whether outgoing incognito contributions should be included. Only works when user is an admin.
    """
    includeIncognito: Boolean
    orderBy: ChronologicalOrderInput
  ): OrderCollection!
  settings: JSON!
  conversations(
    limit: Int
    offset: Int

    """
    Only return conversations matching this tag
    """
    tag: String
  ): ConversationCollection

  """
  Returns conversation's tags for collective sorted by popularity
  """
  conversationsTags(limit: Int = 30): [TagStat]

  """
  Returns expense tags for collective sorted by popularity
  """
  expensesTags(limit: Int = 30): [TagStat]
  transferwise: TransferWise

  """
  The list of payout methods that this account can use to get paid
  """
  payoutMethods: [PayoutMethod]

  """
  The list of payment methods that this account can use to pay for Orders
  """
  paymentMethods(
    """
    Filter on given types (creditcard, giftcard...)
    """
    types: [String]

    """
    Filter on given types (creditcard, giftcard...)
    """
    type: [String]

    """
    Filter on the given service types (opencollective, stripe, paypal...)
    """
    service: [PaymentMethodService]

    """
    Whether to include expired payment methods. Payment methods expired since more than 6 months will never be returned.
    """
    includeExpired: Boolean
  ): [PaymentMethod]

  """
  The list of connected accounts (Stripe, Twitter, etc ...)
  """
  connectedAccounts: [ConnectedAccount]

  """
  The address associated to this account. This field is always public for collectives and events.
  """
  location: Location

  """
  Categories set by Open Collective to help moderation.
  """
  categories: [String]!
  stats: AccountStats
  updates(
    """
    The number of results to fetch (default 10, max 1000)
    """
    limit: Int = 10

    """
    The offset to use to fetch
    """
    offset: Int = 0
    onlyPublishedUpdates: Boolean
    onlyChangelogUpdates: Boolean
    orderBy: ChronologicalOrderInput! = { field: CREATED_AT, direction: DESC }
    searchTerm: String
  ): UpdateCollection!

  """
  Describes the features enabled and available for this account
  """
  features: CollectiveFeatures!
  virtualCards(
    limit: Int = 100
    offset: Int = 0
    state: String = null
    merchantAccount: AccountReferenceInput = null

    """
    Only return expenses that were created after this date
    """
    dateFrom: ISODateTime = null

    """
    Only return expenses that were created before this date
    """
    dateTo: ISODateTime = null
  ): VirtualCardCollection!
  virtualCardMerchants(limit: Int = 100, offset: Int = 0): AccountCollection!
}

"""
A collection of "Accounts"
"""
type AccountCollection implements Collection {
  offset: Int
  limit: Int
  totalCount: Int
  nodes: [Account]
}

"""
Account orders filter (INCOMING or OUTGOING)
"""
enum AccountOrdersFilter {
  INCOMING
  OUTGOING
}

input AccountReferenceInput {
  """
  The public id identifying the account (ie: dgm9bnk8-0437xqry-ejpvzeol-jdayw5re)
  """
  id: String

  """
  The internal id of the account (ie: 580)
  """
  legacyId: Int

  """
  The slug identifying the account (ie: babel for https://opencollective.com/babel)
  """
  slug: String
}

"""
Values that can be edited in Account's settings
"""
scalar AccountSettingsKey

"""
Stats for the Account
"""
type AccountStats {
  id: Int

  """
  Amount of money in cents in the currency of the collective currently available to spend
  """
  balanceWithBlockedFunds: Amount!

  """
  Amount of money in cents in the currency of the collective
  """
  balance: Amount!

  """
  Average amount spent per month based on the last 90 days
  """
  monthlySpending: Amount!

  """
  Total amount spent
  """
  totalAmountSpent: Amount!

  """
  Net amount received
  """
  totalAmountReceived: Amount!
  yearlyBudget: Amount!
  yearlyBudgetManaged: Amount!
}

"""
All account types
"""
enum AccountType {
  BOT
  COLLECTIVE
  EVENT
  FUND
  INDIVIDUAL
  ORGANIZATION
  PROJECT
  VENDOR
}

input AccountUpdateInput {
  """
  The public id identifying the account (ie: dgm9bnk8-0437xqry-ejpvzeol-jdayw5re)
  """
  id: String!
  currency: Currency
}

"""
An account that can receive financial contributions
"""
interface AccountWithContributions {
  """
  Number of unique financial contributors.
  """
  totalFinancialContributors(
    """
    Type of account (COLLECTIVE/EVENT/ORGANIZATION/INDIVIDUAL)
    """
    accountType: AccountType
  ): Int!
  tiers: TierCollection!

  """
  All the persons and entities that contribute to this account
  """
  contributors(
    """
    The number of results to fetch (default 10, max 1000)
    """
    limit: Int = 10

    """
    The offset to use to fetch
    """
    offset: Int = 0
    roles: [MemberRole]
  ): ContributorCollection!

  """
  How much platform fees are charged for this account
  """
  platformFeePercent: Int!

  """
  Returns true if a custom contribution to Open Collective can be submitted for contributions made to this account
  """
  platformContributionAvailable: Boolean!

  """
  Amount of money in cents in the currency of the account currently available to spend
  """
  balance: Int @deprecated(reason: "2020/04/09 - Should not have been introduced. Use stats.balance.value")
  contributionPolicy: String
}

"""
An account that can be hosted by a Host
"""
interface AccountWithHost {
  """
  Returns the Fiscal Host
  """
  host: Host

  """
  Describe how the host charges the collective
  """
  hostFeesStructure: HostFeeStructure

  """
  Fees percentage that the host takes for this collective
  """
  hostFeePercent: Float

  """
  Fees percentage that the platform takes for this collective
  """
  platformFeePercent: Int

  """
  Date of approval by the Fiscal Host.
  """
  approvedAt: DateTime

  """
  Returns whether it's approved by the Fiscal Host
  """
  isApproved: Boolean!

  """
  Returns whether it's active: can accept financial contributions and pay expenses.
  """
  isActive: Boolean!
}

"""
An activity describing something that happened on the platform
"""
type Activity {
  """
  Unique identifier for this activity
  """
  id: String!

  """
  The type of the activity
  """
  type: ActivityType!

  """
  The date on which the ConnectedAccount was created
  """
  createdAt: DateTime!

  """
  The account concerned by this activity, if any
  """
  account: Account

  """
  The person who triggered the action, if any
  """
  individual: Individual

  """
  Data attached to this activity (if any)
  """
  data: JSON!
}

enum ActivityType {
  ACTIVITY_ALL
  CONNECTED_ACCOUNT_CREATED
  COLLECTIVE_CREATED_GITHUB
  COLLECTIVE_APPLY
  COLLECTIVE_APPROVED
  COLLECTIVE_REJECTED
  COLLECTIVE_CREATED
  COLLECTIVE_COMMENT_CREATED
  COLLECTIVE_CONVERSATION_CREATED
  COLLECTIVE_EXPENSE_CREATED
  COLLECTIVE_EXPENSE_DELETED
  COLLECTIVE_EXPENSE_UPDATED
  COLLECTIVE_EXPENSE_REJECTED
  COLLECTIVE_EXPENSE_APPROVED
  COLLECTIVE_EXPENSE_UNAPPROVED
  COLLECTIVE_EXPENSE_PAID
  COLLECTIVE_EXPENSE_MARKED_AS_UNPAID
  COLLECTIVE_EXPENSE_MARKED_AS_SPAM
  COLLECTIVE_EXPENSE_PROCESSING
  COLLECTIVE_EXPENSE_SCHEDULED_FOR_PAYMENT
  COLLECTIVE_EXPENSE_ERROR
  COLLECTIVE_EXPENSE_INVITE_DRAFTED
  COLLECTIVE_EXPENSE_MISSING_RECEIPT
  COLLECTIVE_MEMBER_CREATED
  COLLECTIVE_TRANSACTION_CREATED
  COLLECTIVE_UPDATE_CREATED
  COLLECTIVE_UPDATE_PUBLISHED
  COLLECTIVE_CONTACT
  COLLECTIVE_VIRTUAL_CARD_ASSIGNED
  ORGANIZATION_COLLECTIVE_CREATED
  SUBSCRIPTION_ACTIVATED
  SUBSCRIPTION_CONFIRMED
  SUBSCRIPTION_CANCELED
  TICKET_CONFIRMED
  USER_CREATED
  WEBHOOK_STRIPE_RECEIVED
  WEBHOOK_PAYPAL_RECEIVED
  COLLECTIVE_MONTHLY
  ORDERS_SUSPICIOUS
  BACKYOURSTACK_DISPATCH_CONFIRMED
  ADDED_FUND_TO_ORG
  ACTIVATED_COLLECTIVE_AS_HOST
  DEACTIVATED_COLLECTIVE_AS_HOST
  VIRTUAL_CARD_REQUESTED
  COLLECTIVE_TRANSACTION_PAID
  COLLECTIVE_USER_ADDED
}

"""
Response for the addTwoFactorAuthTokenToIndividual mutation
"""
type AddTwoFactorAuthTokenToIndividualResponse {
  """
  The Individual that the 2FA has been enabled for
  """
  account: Individual!

  """
  The recovery codes for the Individual to write down
  """
  recoveryCodes: [String]
}

"""
A financial amount.
"""
type Amount {
  value: Float
  currency: Currency
  valueInCents: Int
}

"""
Input type for an amount with the value and currency
"""
input AmountInput {
  """
  The value in plain
  """
  value: Float

  """
  The currency string
  """
  currency: Currency

  """
  The value in cents
  """
  valueInCents: Int
}

"""
This represents a Bot account
"""
type Bot implements Account {
  id: String
  legacyId: Int

  """
  The slug identifying the account (ie: babel)
  """
  slug: String
  type: AccountType
  name: String
  description: String
  longDescription: String
  tags: [String]
  website: String
  twitterHandle: String
  githubHandle: String
  currency: String
  expensePolicy: String

  """
  Defines if the contributors wants to be incognito (name not displayed)
  """
  isIncognito: Boolean!
  imageUrl(height: Int, format: ImageFormat): String
  backgroundImageUrl(height: Int, format: ImageFormat): String

  """
  The time of creation
  """
  createdAt: DateTime
  updatedAt: DateTime

  """
  Returns whether this account is archived
  """
  isArchived: Boolean

  """
  Returns whether the account accepts financial contributions.
  """
  isActive: Boolean

  """
  Returns whether the account is setup to Host collectives.
  """
  isHost: Boolean

  """
  Returns true if the remote user is an admin of this account
  """
  isAdmin: Boolean!

  """
  Get all members (admins, members, backers, followers)
  """
  members(
    limit: Int = 100
    offset: Int = 0
    role: [MemberRole]
    accountType: [AccountType]

    """
    Admin only. To filter on the email address of a member, useful to check if a member exists.
    """
    email: EmailAddress

    """
    Order of the results
    """
    orderBy: ChronologicalOrderInput! = { field: CREATED_AT, direction: ASC }
  ): MemberCollection
  memberOf(
    limit: Int
    offset: Int
    role: [MemberRole]
    accountType: [AccountType]
    account: AccountReferenceInput

    """
    Filter on whether the account is a host or not
    """
    isHostAccount: Boolean

    """
    Filter on (un)approved collectives
    """
    isApproved: Boolean

    """
    Filter on archived collectives
    """
    isArchived: Boolean

    """
    Whether incognito profiles should be included in the result. Only works if requesting user is an admin of the account.
    """
    includeIncognito: Boolean = true

    """
    A term to search membership. Searches in collective tags, name, slug, members description and role.
    """
    searchTerm: String

    """
    Filters on the Host fees structure applied to this account
    """
    hostFeesStructure: HostFeeStructure

    """
    Order of the results
    """
    orderBy: ChronologicalOrderInput! = { field: CREATED_AT, direction: ASC }
  ): MemberOfCollection
  transactions(
    type: TransactionType
    limit: Int = 100
    offset: Int = 0
    orderBy: ChronologicalOrderInput = { field: CREATED_AT, direction: DESC }

    """
    If the account is a user and this field is true, contributions from the
    incognito profile will be included too (admins only)
    """
    includeIncognitoTransactions: Boolean! = false
  ): TransactionCollection!
  orders(
    limit: Int = 100
    offset: Int = 0
    filter: AccountOrdersFilter
    status: [OrderStatus]
    tierSlug: String

    """
    Only returns orders that have an subscription (monthly/yearly)
    """
    onlySubscriptions: Boolean

    """
    Whether outgoing incognito contributions should be included. Only works when user is an admin.
    """
    includeIncognito: Boolean
    orderBy: ChronologicalOrderInput = { field: CREATED_AT, direction: DESC }
  ): OrderCollection!
  settings: JSON!
  conversations(
    limit: Int
    offset: Int

    """
    Only return conversations matching this tag
    """
    tag: String
  ): ConversationCollection

  """
  Returns conversation's tags for collective sorted by popularity
  """
  conversationsTags(limit: Int = 30): [TagStat]

  """
  Returns expense tags for collective sorted by popularity
  """
  expensesTags(limit: Int = 30): [TagStat]
  transferwise: TransferWise

  """
  The list of payout methods that this collective can use to get paid
  """
  payoutMethods: [PayoutMethod]

  """
  The list of payment methods that this collective can use to pay for Orders
  """
  paymentMethods(
    types: [String]
    type: [String]
    service: [PaymentMethodService]

    """
    Whether to include expired payment methods. Payment methods expired since more than 6 months will never be returned.
    """
    includeExpired: Boolean
  ): [PaymentMethod]!

  """
  The list of connected accounts (Stripe, Twitter, etc ...)
  """
  connectedAccounts: [ConnectedAccount]

  """
  The address associated to this account. This field is always public for collectives and events.
  """
  location: Location
  categories: [String]!
  stats: AccountStats
  updates(
    """
    The number of results to fetch (default 10, max 1000)
    """
    limit: Int = 10

    """
    The offset to use to fetch
    """
    offset: Int = 0
    onlyPublishedUpdates: Boolean
    onlyChangelogUpdates: Boolean
    orderBy: ChronologicalOrderInput! = { field: CREATED_AT, direction: DESC }
    searchTerm: String
  ): UpdateCollection!

  """
  Describes the features enabled and available for this account
  """
  features: CollectiveFeatures!
  virtualCards(
    limit: Int = 100
    offset: Int = 0
    state: String = null
    merchantAccount: AccountReferenceInput = null

    """
    Only return expenses that were created after this date
    """
    dateFrom: ISODateTime = null

    """
    Only return expenses that were created before this date
    """
    dateTo: ISODateTime = null
  ): VirtualCardCollection!
  virtualCardMerchants(limit: Int = 100, offset: Int = 0): AccountCollection!
}

"""
Input to order results chronologically
"""
input ChronologicalOrderInput {
  """
  Field to chronologically order by.
  """
  field: DateTimeField = CREATED_AT

  """
  Ordering direction.
  """
  direction: OrderDirection = DESC
}

"""
Collection interface shared by all collection types
"""
interface Collection {
  offset: Int
  limit: Int
  totalCount: Int
}

"""
This represents a Collective account
"""
type Collective implements Account & AccountWithHost & AccountWithContributions {
  id: String
  legacyId: Int

  """
  The slug identifying the account (ie: babel)
  """
  slug: String
  type: AccountType
  name: String
  description: String
  longDescription: String
  tags: [String]
  website: String
  twitterHandle: String
  githubHandle: String
  currency: String
  expensePolicy: String

  """
  Defines if the contributors wants to be incognito (name not displayed)
  """
  isIncognito: Boolean!
  imageUrl(height: Int, format: ImageFormat): String
  backgroundImageUrl(height: Int, format: ImageFormat): String

  """
  The time of creation
  """
  createdAt: DateTime
  updatedAt: DateTime

  """
  Returns whether this account is archived
  """
  isArchived: Boolean

  """
  Returns whether it's active: can accept financial contributions and pay expenses.
  """
  isActive: Boolean!

  """
  Returns whether the account is setup to Host collectives.
  """
  isHost: Boolean

  """
  Returns true if the remote user is an admin of this account
  """
  isAdmin: Boolean!

  """
  Get all members (admins, members, backers, followers)
  """
  members(
    limit: Int = 100
    offset: Int = 0
    role: [MemberRole]
    accountType: [AccountType]

    """
    Admin only. To filter on the email address of a member, useful to check if a member exists.
    """
    email: EmailAddress

    """
    Order of the results
    """
    orderBy: ChronologicalOrderInput! = { field: CREATED_AT, direction: ASC }
  ): MemberCollection
  memberOf(
    limit: Int
    offset: Int
    role: [MemberRole]
    accountType: [AccountType]
    account: AccountReferenceInput

    """
    Filter on whether the account is a host or not
    """
    isHostAccount: Boolean

    """
    Filter on (un)approved collectives
    """
    isApproved: Boolean

    """
    Filter on archived collectives
    """
    isArchived: Boolean

    """
    Whether incognito profiles should be included in the result. Only works if requesting user is an admin of the account.
    """
    includeIncognito: Boolean = true

    """
    A term to search membership. Searches in collective tags, name, slug, members description and role.
    """
    searchTerm: String

    """
    Filters on the Host fees structure applied to this account
    """
    hostFeesStructure: HostFeeStructure

    """
    Order of the results
    """
    orderBy: ChronologicalOrderInput! = { field: CREATED_AT, direction: ASC }
  ): MemberOfCollection
  transactions(
    type: TransactionType
    limit: Int = 100
    offset: Int = 0
    orderBy: ChronologicalOrderInput = { field: CREATED_AT, direction: DESC }

    """
    If the account is a user and this field is true, contributions from the
    incognito profile will be included too (admins only)
    """
    includeIncognitoTransactions: Boolean! = false
  ): TransactionCollection!
  orders(
    limit: Int = 100
    offset: Int = 0
    filter: AccountOrdersFilter
    status: [OrderStatus]
    tierSlug: String

    """
    Only returns orders that have an subscription (monthly/yearly)
    """
    onlySubscriptions: Boolean

    """
    Whether outgoing incognito contributions should be included. Only works when user is an admin.
    """
    includeIncognito: Boolean
    orderBy: ChronologicalOrderInput = { field: CREATED_AT, direction: DESC }
  ): OrderCollection!
  settings: JSON!
  conversations(
    limit: Int
    offset: Int

    """
    Only return conversations matching this tag
    """
    tag: String
  ): ConversationCollection

  """
  Returns conversation's tags for collective sorted by popularity
  """
  conversationsTags(limit: Int = 30): [TagStat]

  """
  Returns expense tags for collective sorted by popularity
  """
  expensesTags(limit: Int = 30): [TagStat]
  transferwise: TransferWise

  """
  The list of payout methods that this collective can use to get paid
  """
  payoutMethods: [PayoutMethod]

  """
  The list of payment methods that this collective can use to pay for Orders
  """
  paymentMethods(
    types: [String]
    type: [String]
    service: [PaymentMethodService]

    """
    Whether to include expired payment methods. Payment methods expired since more than 6 months will never be returned.
    """
    includeExpired: Boolean
  ): [PaymentMethod]!

  """
  The list of connected accounts (Stripe, Twitter, etc ...)
  """
  connectedAccounts: [ConnectedAccount]

  """
  The address associated to this account. This field is always public for collectives and events.
  """
  location: Location
  categories: [String]!
  stats: AccountStats
  updates(
    """
    The number of results to fetch (default 10, max 1000)
    """
    limit: Int = 10

    """
    The offset to use to fetch
    """
    offset: Int = 0
    onlyPublishedUpdates: Boolean
    onlyChangelogUpdates: Boolean
    orderBy: ChronologicalOrderInput! = { field: CREATED_AT, direction: DESC }
    searchTerm: String
  ): UpdateCollection!

  """
  Describes the features enabled and available for this account
  """
  features: CollectiveFeatures!
  virtualCards(
    limit: Int = 100
    offset: Int = 0
    state: String = null
    merchantAccount: AccountReferenceInput = null

    """
    Only return expenses that were created after this date
    """
    dateFrom: ISODateTime = null

    """
    Only return expenses that were created before this date
    """
    dateTo: ISODateTime = null
  ): VirtualCardCollection!
  virtualCardMerchants(limit: Int = 100, offset: Int = 0): AccountCollection!

  """
  Returns the Fiscal Host
  """
  host: Host

  """
  Describe how the host charges the collective
  """
  hostFeesStructure: HostFeeStructure

  """
  Fees percentage that the host takes for this collective
  """
  hostFeePercent: Float

  """
  How much platform fees are charged for this account
  """
  platformFeePercent: Int!

  """
  Date of approval by the Fiscal Host.
  """
  approvedAt: DateTime

  """
  Returns whether it's approved by the Fiscal Host
  """
  isApproved: Boolean!

  """
  Number of unique financial contributors.
  """
  totalFinancialContributors(
    """
    Type of account (COLLECTIVE/EVENT/ORGANIZATION/INDIVIDUAL)
    """
    accountType: AccountType
  ): Int!
  tiers: TierCollection!

  """
  All the persons and entities that contribute to this account
  """
  contributors(
    """
    The number of results to fetch (default 10, max 1000)
    """
    limit: Int = 10

    """
    The offset to use to fetch
    """
    offset: Int = 0
    roles: [MemberRole]
  ): ContributorCollection!

  """
  Returns true if a custom contribution to Open Collective can be submitted for contributions made to this account
  """
  platformContributionAvailable: Boolean!

  """
  Amount of money in cents in the currency of the account currently available to spend
  """
  balance: Int @deprecated(reason: "2020/04/09 - Should not have been introduced. Use stats.balance.value")
  contributionPolicy: String
}

input CollectiveCreateInput {
  name: String!
  slug: String!
  description: String!
  tags: [String]
  githubHandle: String
  settings: JSON
}

"""
Describes the features enabled and available for this account
"""
type CollectiveFeatures {
  """
  The id of the account
  """
  id: String!
  RECEIVE_FINANCIAL_CONTRIBUTIONS: CollectiveFeatureStatus
  RECURRING_CONTRIBUTIONS: CollectiveFeatureStatus
  TRANSACTIONS: CollectiveFeatureStatus
  EVENTS: CollectiveFeatureStatus
  PROJECTS: CollectiveFeatureStatus
  USE_EXPENSES: CollectiveFeatureStatus
  RECEIVE_EXPENSES: CollectiveFeatureStatus
  RECEIVE_HOST_APPLICATIONS: CollectiveFeatureStatus
  COLLECTIVE_GOALS: CollectiveFeatureStatus
  TOP_FINANCIAL_CONTRIBUTORS: CollectiveFeatureStatus
  CONVERSATIONS: CollectiveFeatureStatus
  UPDATES: CollectiveFeatureStatus
  ABOUT: CollectiveFeatureStatus
  TEAM: CollectiveFeatureStatus
  ORDER: CollectiveFeatureStatus
  CONTACT_COLLECTIVE: CollectiveFeatureStatus
  CONTACT_FORM: CollectiveFeatureStatus
  CREATE_COLLECTIVE: CollectiveFeatureStatus
  CROSS_CURRENCY_MANUAL_TRANSACTIONS: CollectiveFeatureStatus
  TRANSFERWISE: CollectiveFeatureStatus
  PAYPAL_PAYOUTS: CollectiveFeatureStatus
  PAYPAL_DONATIONS: CollectiveFeatureStatus
  HOST_DASHBOARD: CollectiveFeatureStatus
  CONNECTED_ACCOUNTS: CollectiveFeatureStatus
  ALIPAY: CollectiveFeatureStatus
  VIRTUAL_CARDS: CollectiveFeatureStatus
  REQUEST_VIRTUAL_CARDS: CollectiveFeatureStatus
}

enum CollectiveFeatureStatus {
  """
  The feature is enabled and is actively used
  """
  ACTIVE

  """
  The feature is enabled, but there is no data for it
  """
  AVAILABLE

  """
  The feature is disabled, but can be enabled by an admin
  """
  DISABLED

  """
  The feature is disabled and cannot be activated for this account
  """
  UNSUPPORTED
}

"""
This represents an Comment
"""
type Comment {
  id: String
  createdAt: DateTime
  html: String
  fromAccount: Account
  account: Account

  """
  Returns a map of reactions counts for this comment
  """
  reactions: JSON

  """
  Returns the list of reactions added to this comment by logged in user
  """
  userReactions: [String]
  fromCollective: Account @deprecated(reason: "2020-02-25: Please use fromAccount")
  collective: Account @deprecated(reason: "2020-02-25: Please use account")
}

"""
A collection of "Comments"
"""
type CommentCollection implements Collection {
  offset: Int
  limit: Int
  totalCount: Int
  nodes: [Comment]
}

input CommentCreateInput {
  html: String

  """
  If your comment is linked to an expense, set it here
  """
  expense: ExpenseReferenceInput
  ConversationId: String
  update: UpdateReferenceInput
}

input CommentReferenceInput {
  """
  The public id identifying the comment
  """
  id: String
}

input CommentUpdateInput {
  id: String!
  html: String
}

"""
Response for the confirmGuestAccount mutation
"""
type ConfirmGuestAccountResponse {
  """
  The validated account
  """
  account: Account!

  """
  A token that can be used to sign in
  """
  accessToken: String!
}

"""
This represents a Connected Account
"""
type ConnectedAccount {
  """
  Unique identifier for this connected account
  """
  id: String!

  """
  The internal database identifier of the Connected Account (ie: 580)
  """
  legacyId: Int @deprecated(reason: "2020-05-01: should only be used during the transition to GraphQL API v2.")

  """
  The date on which the ConnectedAccount was created
  """
  createdAt: DateTime!

  """
  The date on which the ConnectedAccount was last updated
  """
  updatedAt: DateTime!
  settings: JSON
  service: ConnectedAccountService!
}

input ConnectedAccountCreateInput {
  """
  Optional Client ID for the token or secret
  """
  clientId: String

  """
  Private data related to the connected account
  """
  data: JSON

  """
  Refresh token for the connected account
  """
  refreshToken: String

  """
  Public data related to the connected account
  """
  settings: JSON

  """
  Secret token used to call service
  """
  token: String

  """
  Service which the connected account belongs to
  """
  service: ConnectedAccountService

  """
  Optional username for the connected account
  """
  username: String
}

input ConnectedAccountReferenceInput {
  """
  The public id identifying the connected account (ie: dgm9bnk8-0437xqry-ejpvzeol-jdayw5re)
  """
  id: String

  """
  The internal id of the account (ie: 580)
  """
  legacyId: Int
}

"""
All supported services a user can connect with
"""
enum ConnectedAccountService {
  paypal
  stripe
  github
  twitter
  transferwise
  privacy
  meetup @deprecated(reason: "Not using this service anymore")
}

enum ContributionFrequency {
  MONTHLY
  YEARLY
  ONETIME
}

"""
A person or an entity that contributes financially or by any other mean to the mission
of the collective. While "Member" is dedicated to permissions, this type is meant
to surface all the public contributors.
"""
type Contributor {
  """
  A unique identifier for this member
  """
  id: String!

  """
  Name of the contributor
  """
  name: String!

  """
  All the roles for a given contributor
  """
  roles: [ContributorRole]

  """
  True if the contributor is a collective admin
  """
  isAdmin: Boolean!

  """
  True if the contributor is a core contributor
  """
  isCore: Boolean!

  """
  True if the contributor is a financial contributor
  """
  isBacker: Boolean!

  """
  Member join date
  """
  since: ISODateTime!

  """
  How much money the user has contributed for this (in cents, using collective currency)
  """
  totalAmountDonated: Int!

  """
  Whether the contributor is an individual, an organization...
  """
  type: String!

  """
  Defines if the contributors wants to be incognito (name not displayed)
  """
  isIncognito: Boolean!

  """
  Description of how the member contribute. Will usually be a tier name, or "design" or "code".
  """
  description: String

  """
  If the contributor has a page on Open Collective, this is the slug to link to it
  """
  collectiveSlug: String

  """
  Contributor avatar or logo
  """
  image(height: Int, format: ImageFormat): String

  """
  A public message from contributors to describe their contributions
  """
  publicMessage: String
}

"""
A collection of "Contributor"
"""
type ContributorCollection implements Collection {
  offset: Int
  limit: Int
  totalCount: Int
  nodes: [Contributor]
}

"""
Possible roles for a contributor. Extends `Member.Role`.
"""
enum ContributorRole {
  HOST
  ADMIN
  MEMBER
  CONTRIBUTOR
  BACKER
  FUNDRAISER
  ATTENDEE
  FOLLOWER
  CONNECTED_COLLECTIVE
  ACCOUNTANT
}

"""
A conversation thread
"""
type Conversation {
  id: String!
  slug: String!
  title: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  tags: [String]
  summary: String!
  collective: Account
  fromCollective: Account

  """
  The root comment / starter for this conversation
  """
  body: Comment

  """
  List the comments for this conversation. Not backed by a loader, don't use this in lists.
  """
  comments(limit: Int, offset: Int): CommentCollection
  followers(limit: Int = 10, offset: Int = 0): AccountCollection
  stats: ConversationStats
}

"""
A collection of "Conversations"
"""
type ConversationCollection implements Collection {
  offset: Int
  limit: Int
  totalCount: Int
  nodes: [Conversation]
}

type ConversationStats {
  id: String!

  """
  Total number of comments for this conversation
  """
  commentsCount: Int
}

"""
Two-letters country code following ISO3166_1
"""
enum CountryISO {
  """
  Afghanistan
  """
  AF

  """
  Åland Islands
  """
  AX

  """
  Albania
  """
  AL

  """
  Algeria
  """
  DZ

  """
  Andorra
  """
  AD

  """
  Angola
  """
  AO

  """
  Antigua and Barbuda
  """
  AG

  """
  Argentina
  """
  AR

  """
  Armenia
  """
  AM

  """
  Australia
  """
  AU

  """
  Austria
  """
  AT

  """
  Azerbaijan
  """
  AZ

  """
  The Bahamas
  """
  BS

  """
  Bahrain
  """
  BH

  """
  Bangladesh
  """
  BD

  """
  Barbados
  """
  BB

  """
  Belarus
  """
  BY

  """
  Belgium
  """
  BE

  """
  Belize
  """
  BZ

  """
  Benin
  """
  BJ

  """
  Bhutan
  """
  BT

  """
  Bolivia
  """
  BO

  """
  Bosnia and Herzegovina
  """
  BA

  """
  Botswana
  """
  BW

  """
  Brazil
  """
  BR

  """
  Brunei
  """
  BN

  """
  Bulgaria
  """
  BG

  """
  Burkina
  """
  BF

  """
  Burundi
  """
  BI

  """
  Cambodia
  """
  KH

  """
  Cameroon
  """
  CM

  """
  Canada
  """
  CA

  """
  Cape Verde
  """
  CV

  """
  The Central African Republic
  """
  CF

  """
  Chad
  """
  TD

  """
  Chile
  """
  CL

  """
  China
  """
  CN

  """
  Colombia
  """
  CO

  """
  The Comoros
  """
  KM

  """
  The Congo
  """
  CG

  """
  The Democratic Republic of the Congo
  """
  CD

  """
  Costa Rica
  """
  CR

  """
  Côte d'Ivoire
  """
  CI

  """
  Croatia
  """
  HR

  """
  Cuba
  """
  CU

  """
  Cyprus
  """
  CY

  """
  The Czech Republic
  """
  CZ

  """
  Denmark
  """
  DK

  """
  Djibouti
  """
  DJ

  """
  Dominica
  """
  DM

  """
  The Dominican Republic
  """
  DO

  """
  Timor-Leste
  """
  TL

  """
  Ecuador
  """
  EC

  """
  Egypt
  """
  EG

  """
  El Salvador
  """
  SV

  """
  Equatorial Guinea
  """
  GQ

  """
  Eritrea
  """
  ER

  """
  Estonia
  """
  EE

  """
  Ethiopia
  """
  ET

  """
  Fiji
  """
  FJ

  """
  Finland
  """
  FI

  """
  France
  """
  FR

  """
  Gabon
  """
  GA

  """
  The Gambia
  """
  GM

  """
  Georgia
  """
  GE

  """
  Germany
  """
  DE

  """
  Ghana
  """
  GH

  """
  Greece
  """
  GR

  """
  Grenada
  """
  GD

  """
  Guatemala
  """
  GT

  """
  Guernsey
  """
  GG

  """
  Guinea
  """
  GN

  """
  Guinea-Bissau
  """
  GW

  """
  Guyana
  """
  GY

  """
  Haiti
  """
  HT

  """
  The Holy See
  """
  VA

  """
  Honduras
  """
  HN

  """
  Hungary
  """
  HU

  """
  Iceland
  """
  IS

  """
  India
  """
  IN

  """
  Indonesia
  """
  ID

  """
  Iran
  """
  IR

  """
  Iraq
  """
  IQ

  """
  Ireland
  """
  IE

  """
  Isle of Man
  """
  IM

  """
  Israel
  """
  IL

  """
  Italy
  """
  IT

  """
  Jamaica
  """
  JM

  """
  Japan
  """
  JP

  """
  Jersey
  """
  JE

  """
  Jordan
  """
  JO

  """
  Kazakhstan
  """
  KZ

  """
  Kenya
  """
  KE

  """
  Kiribati
  """
  KI

  """
  The Democratic People's Republic of Korea
  """
  KP

  """
  The Republic of Korea
  """
  KR

  """
  Kuwait
  """
  KW

  """
  Kyrgyzstan
  """
  KG

  """
  Laos
  """
  LA

  """
  Latvia
  """
  LV

  """
  Lebanon
  """
  LB

  """
  Lesotho
  """
  LS

  """
  Liberia
  """
  LR

  """
  Libya
  """
  LY

  """
  Liechtenstein
  """
  LI

  """
  Lithuania
  """
  LT

  """
  Luxembourg
  """
  LU

  """
  Madagascar
  """
  MG

  """
  Malawi
  """
  MW

  """
  Malaysia
  """
  MY

  """
  Maldives
  """
  MV

  """
  Mali
  """
  ML

  """
  Malta
  """
  MT

  """
  The Marshall Islands
  """
  MH

  """
  Mauritania
  """
  MR

  """
  Mauritius
  """
  MU

  """
  Mexico
  """
  MX

  """
  Micronesia
  """
  FM

  """
  Moldova
  """
  MD

  """
  Monaco
  """
  MC

  """
  Mongolia
  """
  MN

  """
  Montenegro
  """
  ME

  """
  Morocco
  """
  MA

  """
  Mozambique
  """
  MZ

  """
  Myanmar
  """
  MM

  """
  Namibia
  """
  NA

  """
  Nauru
  """
  NR

  """
  Nepal
  """
  NP

  """
  The Netherlands
  """
  NL

  """
  New Zealand
  """
  NZ

  """
  Nicaragua
  """
  NI

  """
  The Niger
  """
  NE

  """
  Nigeria
  """
  NG

  """
  Norway
  """
  NO

  """
  Oman
  """
  OM

  """
  Pakistan
  """
  PK

  """
  Palau
  """
  PW

  """
  Panama
  """
  PA

  """
  Papua New Guinea
  """
  PG

  """
  Paraguay
  """
  PY

  """
  Peru
  """
  PE

  """
  The Philippines
  """
  PH

  """
  Poland
  """
  PL

  """
  Portugal
  """
  PT

  """
  Qatar
  """
  QA

  """
  Romania
  """
  RO

  """
  Russia
  """
  RU

  """
  Rwanda
  """
  RW

  """
  Saint Kitts and Nevis
  """
  KN

  """
  Saint Lucia
  """
  LC

  """
  Saint Vincent and The Grenadines
  """
  VC

  """
  Samoa
  """
  WS

  """
  San Marino
  """
  SM

  """
  Sao Tome and Principe
  """
  ST

  """
  Saudi Arabia
  """
  SA

  """
  Senegal
  """
  SN

  """
  Serbia
  """
  RS

  """
  Seychelles
  """
  SC

  """
  Sierra Leone
  """
  SL

  """
  Singapore
  """
  SG

  """
  Slovakia
  """
  SK

  """
  Slovenia
  """
  SI

  """
  Solomon Islands
  """
  SB

  """
  Somalia
  """
  SO

  """
  South Africa
  """
  ZA

  """
  Spain
  """
  ES

  """
  Sri Lanka
  """
  LK

  """
  The Sudan
  """
  SD

  """
  Suriname
  """
  SR

  """
  Swaziland
  """
  SZ

  """
  Sweden
  """
  SE

  """
  Switzerland
  """
  CH

  """
  Syria
  """
  SY

  """
  Tajikistan
  """
  TJ

  """
  Tanzania
  """
  TZ

  """
  Thailand
  """
  TH

  """
  Macedonia
  """
  MK

  """
  Togo
  """
  TG

  """
  Tonga
  """
  TO

  """
  Trinidad and Tobago
  """
  TT

  """
  Tunisia
  """
  TN

  """
  Turkey
  """
  TR

  """
  Turkmenistan
  """
  TM

  """
  Tuvalu
  """
  TV

  """
  Uganda
  """
  UG

  """
  Ukraine
  """
  UA

  """
  The United Arab Emirates
  """
  AE

  """
  The United Kingdom
  """
  GB

  """
  The United States
  """
  US

  """
  Uruguay
  """
  UY

  """
  Uzbekistan
  """
  UZ

  """
  Vanuatu
  """
  VU

  """
  Venezuela
  """
  VE

  """
  Viet Nam
  """
  VN

  """
  Yemen
  """
  YE

  """
  Zambia
  """
  ZM

  """
  Zimbabwe
  """
  ZW

  """
  American Samoa
  """
  AS

  """
  Anguilla
  """
  AI

  """
  Antarctica
  """
  AQ

  """
  Aruba
  """
  AW

  """
  Bermuda
  """
  BM

  """
  Bouvet Island
  """
  BV

  """
  The British Indian Ocean Territory
  """
  IO

  """
  Cayman Islands
  """
  KY

  """
  Christmas Island
  """
  CX

  """
  Cocos Islands
  """
  CC

  """
  Cook Islands
  """
  CK

  """
  Falkland Islands
  """
  FK

  """
  Faroe Islands
  """
  FO

  """
  French Guiana
  """
  GF

  """
  French Polynesia
  """
  PF

  """
  The French Southern Territories
  """
  TF

  """
  Gibraltar
  """
  GI

  """
  Greenland
  """
  GL

  """
  Guadeloupe
  """
  GP

  """
  Guam
  """
  GU

  """
  Heard Island and McDonald Islands
  """
  HM

  """
  Hong Kong
  """
  HK

  """
  Macao
  """
  MO

  """
  Martinique
  """
  MQ

  """
  Mayotte
  """
  YT

  """
  Montserrat
  """
  MS

  """
  Netherlands Antilles
  """
  AN

  """
  New Caledonia
  """
  NC

  """
  Niue
  """
  NU

  """
  Norfolk Island
  """
  NF

  """
  Northern Mariana Islands
  """
  MP

  """
  The Occupied Palestinian Territory
  """
  PS

  """
  Pitcairn
  """
  PN

  """
  Puerto Rico
  """
  PR

  """
  Réunion
  """
  RE

  """
  Saint Barthélemy
  """
  BL

  """
  Saint Helena
  """
  SH

  """
  Saint Martin
  """
  MF

  """
  Saint Pierre and Miquelon
  """
  PM

  """
  South Georgia and The South Sandwich Islands
  """
  GS

  """
  Svalbard and Jan Mayen
  """
  SJ

  """
  Taiwan
  """
  TW

  """
  Tokelau
  """
  TK

  """
  Turks and Caicos Islands
  """
  TC

  """
  United States Minor Outlying Islands
  """
  UM

  """
  British Virgin Islands
  """
  VG

  """
  US Virgin Islands
  """
  VI

  """
  Wallis and Futuna
  """
  WF

  """
  Western Sahara
  """
  EH
}

"""
This represents a Credit transaction
"""
type Credit implements Transaction {
  id: String!
  legacyId: Int!
  uuid: String
  type: TransactionType
  kind: TransactionKind
  description: String
  amount: Amount!
  amountInHostCurrency: Amount!
  netAmount: Amount!
  taxAmount: Amount!

  """
  If taxAmount is set, this field will contain more info about the tax
  """
  taxInfo: TaxInfo
  platformFee: Amount!
  hostFee: Amount!
  paymentProcessorFee: Amount!
  host: Account
  createdAt: DateTime
  updatedAt: DateTime
  expense: Expense
  order: Order
  isRefunded: Boolean
  isRefund: Boolean
  paymentMethod: PaymentMethod

  """
  The permissions given to current logged in user for this transaction
  """
  permissions: TransactionPermissions!

  """
  Account that emitted the gift card used for this transaction (if any)
  """
  giftCardEmitterAccount: Account
  isOrderRejected: Boolean!
  refundTransaction: Transaction
  relatedTransactions(
    """
    Filter by kind
    """
    kind: [TransactionKind]
  ): [Transaction]!
  fromAccount: Account
  toAccount: Account
}

input CreditCardCreateInput {
  token: String!
  brand: String!
  country: String!
  expMonth: Int!
  expYear: Int!
  fullName: String
  funding: String
  zip: String
}

type CreditCardWithStripeError {
  """
  The payment method created
  """
  paymentMethod: PaymentMethod!

  """
  This field will be set if there was an error with Stripe during strong customer authentication
  """
  stripeError: StripeError
}

"""
All supported currencies
"""
enum Currency {
  """
  Argentine Peso
  """
  ARS

  """
  Australian Dollar
  """
  AUD

  """
  Taka
  """
  BDT

  """
  Bulgarian Lev
  """
  BGN

  """
  Brazilian Real
  """
  BRL

  """
  Canadian Dollar
  """
  CAD

  """
  Swiss Franc
  """
  CHF

  """
  Czech Koruna
  """
  CZK

  """
  Danish Krone
  """
  DKK

  """
  Euro
  """
  EUR

  """
  Pound Sterling
  """
  GBP

  """
  Hong Kong Dollar
  """
  HKD

  """
  Kuna
  """
  HRK

  """
  Forint
  """
  HUF

  """
  Indian Rupee
  """
  INR

  """
  Iceland Krona
  """
  ISK

  """
  Yen
  """
  JPY

  """
  Mexican Peso
  """
  MXN

  """
  Malaysian Ringgit
  """
  MYR

  """
  Naira
  """
  NGN

  """
  Norwegian Krone
  """
  NOK

  """
  Nepalese Rupee
  """
  NPR

  """
  New Zealand Dollar
  """
  NZD

  """
  Zloty
  """
  PLN

  """
  Romanian Leu
  """
  RON

  """
  Swedish Krona
  """
  SEK

  """
  Singapore Dollar
  """
  SGD

  """
  Hryvnia
  """
  UAH

  """
  US Dollar
  """
  USD

  """
  Peso Uruguayo
  """
  UYU

  """
  Rand
  """
  ZAR
}

scalar DateString

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the
`date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO
8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

"""
All possible DateTime fields for a resource
"""
enum DateTimeField {
  """
  The creation time of a resource
  """
  CREATED_AT
}

"""
This represents a Debit transaction
"""
type Debit implements Transaction {
  id: String!
  legacyId: Int!
  uuid: String
  type: TransactionType
  kind: TransactionKind
  description: String
  amount: Amount!
  amountInHostCurrency: Amount!
  netAmount: Amount!
  taxAmount: Amount!

  """
  If taxAmount is set, this field will contain more info about the tax
  """
  taxInfo: TaxInfo
  platformFee: Amount!
  hostFee: Amount!
  paymentProcessorFee: Amount!
  host: Account
  createdAt: DateTime
  updatedAt: DateTime
  expense: Expense
  order: Order
  isRefunded: Boolean
  isRefund: Boolean
  paymentMethod: PaymentMethod

  """
  The permissions given to current logged in user for this transaction
  """
  permissions: TransactionPermissions!

  """
  Account that emitted the gift card used for this transaction (if any)
  """
  giftCardEmitterAccount: Account
  isOrderRejected: Boolean!
  refundTransaction: Transaction
  relatedTransactions(
    """
    Filter by kind
    """
    kind: [TransactionKind]
  ): [Transaction]!
  fromAccount: Account
  toAccount: Account
}

"""
A field whose value conforms to the standard internet email address format as
specified in RFC822: https://www.w3.org/Protocols/rfc822/.
"""
scalar EmailAddress

type EmojiReactionResponse {
  """
  Reference to the update corresponding to the emojis
  """
  update: Update

  """
  Reference to the comment corresponding to the emojis
  """
  comment: Comment
}

"""
This represents an Event account
"""
type Event implements Account & AccountWithHost & AccountWithContributions {
  id: String
  legacyId: Int

  """
  The slug identifying the account (ie: babel)
  """
  slug: String
  type: AccountType
  name: String
  description: String
  longDescription: String
  tags: [String]
  website: String
  twitterHandle: String
  githubHandle: String
  currency: String
  expensePolicy: String

  """
  Defines if the contributors wants to be incognito (name not displayed)
  """
  isIncognito: Boolean!
  imageUrl(height: Int, format: ImageFormat): String
  backgroundImageUrl(height: Int, format: ImageFormat): String

  """
  The time of creation
  """
  createdAt: DateTime
  updatedAt: DateTime

  """
  Returns whether this account is archived
  """
  isArchived: Boolean

  """
  Returns whether it's active: can accept financial contributions and pay expenses.
  """
  isActive: Boolean!

  """
  Returns whether the account is setup to Host collectives.
  """
  isHost: Boolean

  """
  Returns true if the remote user is an admin of this account
  """
  isAdmin: Boolean!

  """
  Get all members (admins, members, backers, followers)
  """
  members(
    limit: Int = 100
    offset: Int = 0
    role: [MemberRole]
    accountType: [AccountType]

    """
    Admin only. To filter on the email address of a member, useful to check if a member exists.
    """
    email: EmailAddress

    """
    Order of the results
    """
    orderBy: ChronologicalOrderInput! = { field: CREATED_AT, direction: ASC }
  ): MemberCollection
  memberOf(
    limit: Int
    offset: Int
    role: [MemberRole]
    accountType: [AccountType]
    account: AccountReferenceInput

    """
    Filter on whether the account is a host or not
    """
    isHostAccount: Boolean

    """
    Filter on (un)approved collectives
    """
    isApproved: Boolean

    """
    Filter on archived collectives
    """
    isArchived: Boolean

    """
    Whether incognito profiles should be included in the result. Only works if requesting user is an admin of the account.
    """
    includeIncognito: Boolean = true

    """
    A term to search membership. Searches in collective tags, name, slug, members description and role.
    """
    searchTerm: String

    """
    Filters on the Host fees structure applied to this account
    """
    hostFeesStructure: HostFeeStructure

    """
    Order of the results
    """
    orderBy: ChronologicalOrderInput! = { field: CREATED_AT, direction: ASC }
  ): MemberOfCollection
  transactions(
    type: TransactionType
    limit: Int = 100
    offset: Int = 0
    orderBy: ChronologicalOrderInput = { field: CREATED_AT, direction: DESC }

    """
    If the account is a user and this field is true, contributions from the
    incognito profile will be included too (admins only)
    """
    includeIncognitoTransactions: Boolean! = false
  ): TransactionCollection!
  orders(
    limit: Int = 100
    offset: Int = 0
    filter: AccountOrdersFilter
    status: [OrderStatus]
    tierSlug: String

    """
    Only returns orders that have an subscription (monthly/yearly)
    """
    onlySubscriptions: Boolean

    """
    Whether outgoing incognito contributions should be included. Only works when user is an admin.
    """
    includeIncognito: Boolean
    orderBy: ChronologicalOrderInput = { field: CREATED_AT, direction: DESC }
  ): OrderCollection!
  settings: JSON!
  conversations(
    limit: Int
    offset: Int

    """
    Only return conversations matching this tag
    """
    tag: String
  ): ConversationCollection

  """
  Returns conversation's tags for collective sorted by popularity
  """
  conversationsTags(limit: Int = 30): [TagStat]

  """
  Returns expense tags for collective sorted by popularity
  """
  expensesTags(limit: Int = 30): [TagStat]
  transferwise: TransferWise

  """
  The list of payout methods that this collective can use to get paid
  """
  payoutMethods: [PayoutMethod]

  """
  The list of payment methods that this collective can use to pay for Orders
  """
  paymentMethods(
    types: [String]
    type: [String]
    service: [PaymentMethodService]

    """
    Whether to include expired payment methods. Payment methods expired since more than 6 months will never be returned.
    """
    includeExpired: Boolean
  ): [PaymentMethod]!

  """
  The list of connected accounts (Stripe, Twitter, etc ...)
  """
  connectedAccounts: [ConnectedAccount]

  """
  The address associated to this account. This field is always public for collectives and events.
  """
  location: Location
  categories: [String]!
  stats: AccountStats
  updates(
    """
    The number of results to fetch (default 10, max 1000)
    """
    limit: Int = 10

    """
    The offset to use to fetch
    """
    offset: Int = 0
    onlyPublishedUpdates: Boolean
    onlyChangelogUpdates: Boolean
    orderBy: ChronologicalOrderInput! = { field: CREATED_AT, direction: DESC }
    searchTerm: String
  ): UpdateCollection!

  """
  Describes the features enabled and available for this account
  """
  features: CollectiveFeatures!
  virtualCards(
    limit: Int = 100
    offset: Int = 0
    state: String = null
    merchantAccount: AccountReferenceInput = null

    """
    Only return expenses that were created after this date
    """
    dateFrom: ISODateTime = null

    """
    Only return expenses that were created before this date
    """
    dateTo: ISODateTime = null
  ): VirtualCardCollection!
  virtualCardMerchants(limit: Int = 100, offset: Int = 0): AccountCollection!

  """
  Returns the Fiscal Host
  """
  host: Host

  """
  Describe how the host charges the collective
  """
  hostFeesStructure: HostFeeStructure

  """
  Fees percentage that the host takes for this collective
  """
  hostFeePercent: Float

  """
  How much platform fees are charged for this account
  """
  platformFeePercent: Int!

  """
  Date of approval by the Fiscal Host.
  """
  approvedAt: DateTime

  """
  Returns whether it's approved by the Fiscal Host
  """
  isApproved: Boolean!

  """
  Number of unique financial contributors.
  """
  totalFinancialContributors(
    """
    Type of account (COLLECTIVE/EVENT/ORGANIZATION/INDIVIDUAL)
    """
    accountType: AccountType
  ): Int!
  tiers: TierCollection!

  """
  All the persons and entities that contribute to this account
  """
  contributors(
    """
    The number of results to fetch (default 10, max 1000)
    """
    limit: Int = 10

    """
    The offset to use to fetch
    """
    offset: Int = 0
    roles: [MemberRole]
  ): ContributorCollection!

  """
  Returns true if a custom contribution to Open Collective can be submitted for contributions made to this account
  """
  platformContributionAvailable: Boolean!

  """
  Amount of money in cents in the currency of the account currently available to spend
  """
  balance: Int @deprecated(reason: "2020/04/09 - Should not have been introduced. Use stats.balance.value")
  contributionPolicy: String

  """
  The Account hosting this Event
  """
  parent: Account

  """
  The Collective hosting this Event
  """
  parentCollective: Collective @deprecated(reason: "2020/07/01 - Use parent instead.")
}

"""
This represents an Expense
"""
type Expense {
  id: String!

  """
  Legacy ID as returned by API V1. Avoid relying on this field as it may be removed in the future.
  """
  legacyId: Int!

  """
  Title/main description for this expense
  """
  description: String!

  """
  Longer description for this expense
  """
  longDescription: String

  """
  Total amount of the expense (sum of the item's amounts).
  """
  amount: Int!

  """
  The time of creation
  """
  createdAt: DateTime!

  """
  Currency that should be used for the payout
  """
  currency: Currency!

  """
  Whether this expense is a receipt or an invoice
  """
  type: ExpenseType!

  """
  The state of the expense (pending, approved, paid, rejected...etc)
  """
  status: ExpenseStatus!

  """
  Returns the list of comments for this expense, or `null` if user is not allowed to see them
  """
  comments(
    """
    The number of results to fetch (default 10, max 1000)
    """
    limit: Int = 10

    """
    The offset to use to fetch
    """
    offset: Int = 0
    orderBy: ChronologicalOrderInput = { field: CREATED_AT, direction: ASC }
  ): CommentCollection

  """
  The account where the expense was submitted
  """
  account: Account!

  """
  The account being paid by this expense
  """
  payee: Account!

  """
  The address of the payee
  """
  payeeLocation: Location

  """
  The account who created this expense
  """
  createdByAccount: Account

  """
  The payout method to use for this expense
  """
  payoutMethod: PayoutMethod

  """
  The virtual card used to pay for this charge
  """
  virtualCard: VirtualCard

  """
  (Optional) files attached to the expense
  """
  attachedFiles: [ExpenseAttachedFile!]
  attachments: [ExpenseItem] @deprecated(reason: "2020-04-08: Field has been renamed to \"items\"")
  items: [ExpenseItem]

  """
  Additional information about the payment as HTML. Only visible to user and admins.
  """
  privateMessage: String

  """
  Information to display on the invoice. Only visible to user and admins.
  """
  invoiceInfo: String

  """
  The permissions given to current logged in user for this expense
  """
  permissions: ExpensePermissions!

  """
  The list of activities (ie. approved, edited, etc) for this expense ordered by date ascending
  """
  activities: [Activity!]!
  tags: [String]!

  """
  Returns the list of legal documents required from the payee before the expense can be payed. Must be logged in.
  """
  requiredLegalDocuments: [LegalDocumentType]

  """
  Drafted field values that were still not persisted
  """
  draft: JSON

  """
  The account that requested this expense to be submitted
  """
  requestedByAccount: Account
}

"""
Fields for an expense's attached file
"""
type ExpenseAttachedFile {
  """
  Unique identifier for this file
  """
  id: String!
  url: URL
}

input ExpenseAttachedFileInput {
  """
  ID of the file
  """
  id: String

  """
  URL of the file
  """
  url: URL!
}

"""
A collection of "Expenses"
"""
type ExpenseCollection implements Collection {
  offset: Int
  limit: Int
  totalCount: Int
  nodes: [Expense]
}

input ExpenseCreateInput {
  """
  Main title of the expense
  """
  description: String!

  """
  Longer text to attach to the expense
  """
  longDescription: String

  """
  Tags associated to the expense (ie. Food, Engineering...)
  """
  tags: [String]

  """
  The type of the expense
  """
  type: ExpenseType!

  """
  A private note that will be attached to your invoice, as HTML
  """
  privateMessage: String

  """
  Tax ID, VAT number...etc This information will be printed on your invoice.
  """
  invoiceInfo: String

  """
  The payout method that will be used to reimburse the expense
  """
  payoutMethod: PayoutMethodInput!

  """
  The list of items for this expense. Total amount will be computed from them.
  """
  items: [ExpenseItemCreateInput]

  """
  (Optional) A list of files that you want to attach to this expense
  """
  attachedFiles: [ExpenseAttachedFileInput!]

  """
  Account to reimburse
  """
  payee: AccountReferenceInput!

  """
  The address of the payee
  """
  payeeLocation: LocationInput
}

input ExpenseInviteDraftInput {
  """
  Main title of the expense
  """
  description: String

  """
  Longer text to attach to the expense
  """
  longDescription: String

  """
  Tags associated to the expense (ie. Food, Engineering...)
  """
  tags: [String]

  """
  The type of the expense
  """
  type: ExpenseType!

  """
  A private note that will be attached to your invoice, as HTML
  """
  privateMessage: String

  """
  Tax ID, VAT number...etc This information will be printed on your invoice.
  """
  invoiceInfo: String

  """
  Note to be sent to the invited user through email.
  """
  recipientNote: String

  """
  The list of items for this expense. Total amount will be computed from them.
  """
  items: [JSON]

  """
  (Optional) A list of files that you want to attach to this expense
  """
  attachedFiles: [JSON]

  """
  Account to reimburse
  """
  payee: ExpenseInvitee!

  """
  The address of the payee
  """
  payeeLocation: LocationInput

  """
  The payout method that will be used to reimburse the expense
  """
  payoutMethod: PayoutMethodInput
}

input ExpenseInvitee {
  id: Int
  slug: String
  name: String
  email: String
  isInvite: Boolean
}

"""
Fields for an expense item
"""
type ExpenseItem {
  """
  Unique identifier for this expense item
  """
  id: String!

  """
  Amount of this item
  """
  amount: Int!

  """
  The date on which the item was created
  """
  createdAt: DateTime!

  """
  The date on which the item was last updated
  """
  updatedAt: DateTime!

  """
  The date on which the expense took place
  """
  incurredAt: DateTime!

  """
  A description for this item. Enforced for new items, but old expenses may not have one.
  """
  description: String
  url: URL
}

input ExpenseItemCreateInput {
  """
  Amount in cents
  """
  amount: Int!

  """
  What is this item about?
  """
  description: String!

  """
  URL of the file linked to this item. Must be provided if the expense type is RECEIPT.
  """
  url: URL

  """
  When was the money spent?
  """
  incurredAt: DateString
}

input ExpenseItemInput {
  """
  ID of the item
  """
  id: String

  """
  Amount in cents
  """
  amount: Int

  """
  What is this item about?
  """
  description: String

  """
  URL of the file linked to this item. Must be provided if the expense type is RECEIPT.
  """
  url: URL

  """
  When was the money spent?
  """
  incurredAt: DateString
}

"""
Fields for the user permissions on an expense
"""
type ExpensePermissions {
  id: String!

  """
  Whether the current user can edit the expense
  """
  canEdit: Boolean!

  """
  Tags permissions are a bit different, and can be edited by admins even if the expense has already been paid
  """
  canEditTags: Boolean!

  """
  Whether the current user can edit the expense
  """
  canDelete: Boolean!

  """
  Whether the current user can the the invoice info for this expense
  """
  canSeeInvoiceInfo: Boolean!

  """
  Whether the current user can trigger the payment for this expense
  """
  canPay: Boolean!

  """
  Whether the current user can approve this expense
  """
  canApprove: Boolean!

  """
  Whether the current user can unapprove this expense
  """
  canUnapprove: Boolean!

  """
  Whether the current user can reject this expense
  """
  canReject: Boolean!

  """
  Whether the current user can mark this expense as spam
  """
  canMarkAsSpam: Boolean!

  """
  Whether the current user can mark this expense as unpaid
  """
  canMarkAsUnpaid: Boolean!

  """
  Whether the current user can comment and see comments for this expense
  """
  canComment: Boolean!

  """
  Whether the current user can unschedule this expense payment
  """
  canUnschedulePayment: Boolean!
}

"""
All supported expense types
"""
enum ExpenseProcessAction {
  """
  To mark the expense as approved
  """
  APPROVE

  """
  To mark the expense as pending after it has been approved
  """
  UNAPPROVE

  """
  To mark the expense as rejected
  """
  REJECT

  """
  To mark the expense as rejected
  """
  MARK_AS_UNPAID

  """
  To schedule the expense for payment
  """
  SCHEDULE_FOR_PAYMENT

  """
  To unschedule the expense payment
  """
  UNSCHEDULE_PAYMENT

  """
  To trigger the payment
  """
  PAY

  """
  To mark the expense as spam
  """
  MARK_AS_SPAM
}

input ExpenseReferenceInput {
  """
  The public id identifying the expense (ie: dgm9bnk8-0437xqry-ejpvzeol-jdayw5re)
  """
  id: String

  """
  The internal id of the expense (ie: 580)
  """
  legacyId: Int
}

enum ExpenseStatus {
  DRAFT
  UNVERIFIED
  PENDING
  APPROVED
  REJECTED
  PROCESSING
  ERROR
  PAID
  SCHEDULED_FOR_PAYMENT
  SPAM
}

"""
Describes the values allowed to filter expenses, namely all the expense statuses and the special "READY_TO_PAY" value.
"""
enum ExpenseStatusFilter {
  DRAFT
  UNVERIFIED
  PENDING
  APPROVED
  REJECTED
  PROCESSING
  ERROR
  PAID
  SCHEDULED_FOR_PAYMENT
  SPAM

  """
  Only expenses that are ready to be paid (must be approved, have the sufficiant balance and have the tax forms completed)
  """
  READY_TO_PAY
}

"""
All supported expense types
"""
enum ExpenseType {
  """
  Invoice: Charge for your time or get paid in advance.
  """
  INVOICE

  """
  Receipt: Get paid back for a purchase already made.
  """
  RECEIPT

  """
  Funding Request: Request funding for a project or initiative.
  """
  FUNDING_REQUEST

  """
  Unclassified expense
  """
  UNCLASSIFIED

  """
  Credit Card Charge: Payment done using an issued (virtual) credit card issued by your Fiscal Host.
  """
  CHARGE
}

input ExpenseUpdateInput {
  """
  ID of the expense that you are trying to edit
  """
  id: String!

  """
  Main title of the expense
  """
  description: String

  """
  Longer text to attach to the expense
  """
  longDescription: String

  """
  Tags associated to the expense (ie. Food, Engineering...)
  """
  tags: [String]

  """
  The type of the expense
  """
  type: ExpenseType

  """
  A private note that will be attached to your invoice, as HTML
  """
  privateMessage: String

  """
  Tax ID, VAT number...etc This information will be printed on your invoice.
  """
  invoiceInfo: String

  """
  The payout method that will be used to reimburse the expense
  """
  payoutMethod: PayoutMethodInput

  """
  @deprecated 2020-04-08: Please use the items field - The list of items for
  this expense. Total amount will be computed from them.
  """
  attachments: [ExpenseItemInput]

  """
  The list of items for this expense. Total amount will be computed from them.
  """
  items: [ExpenseItemInput]

  """
  (Optional) A list of files that you want to attach to this expense
  """
  attachedFiles: [ExpenseAttachedFileInput!]

  """
  Account to reimburse
  """
  payee: NewAccountOrReferenceInput

  """
  The address of the payee
  """
  payeeLocation: LocationInput
}

"""
This represents an Project account
"""
type Fund implements Account & AccountWithHost & AccountWithContributions {
  id: String
  legacyId: Int

  """
  The slug identifying the account (ie: babel)
  """
  slug: String
  type: AccountType
  name: String
  description: String
  longDescription: String
  tags: [String]
  website: String
  twitterHandle: String
  githubHandle: String
  currency: String
  expensePolicy: String

  """
  Defines if the contributors wants to be incognito (name not displayed)
  """
  isIncognito: Boolean!
  imageUrl(height: Int, format: ImageFormat): String
  backgroundImageUrl(height: Int, format: ImageFormat): String

  """
  The time of creation
  """
  createdAt: DateTime
  updatedAt: DateTime

  """
  Returns whether this account is archived
  """
  isArchived: Boolean

  """
  Returns whether it's active: can accept financial contributions and pay expenses.
  """
  isActive: Boolean!

  """
  Returns whether the account is setup to Host collectives.
  """
  isHost: Boolean

  """
  Returns true if the remote user is an admin of this account
  """
  isAdmin: Boolean!

  """
  Get all members (admins, members, backers, followers)
  """
  members(
    limit: Int = 100
    offset: Int = 0
    role: [MemberRole]
    accountType: [AccountType]

    """
    Admin only. To filter on the email address of a member, useful to check if a member exists.
    """
    email: EmailAddress

    """
    Order of the results
    """
    orderBy: ChronologicalOrderInput! = { field: CREATED_AT, direction: ASC }
  ): MemberCollection
  memberOf(
    limit: Int
    offset: Int
    role: [MemberRole]
    accountType: [AccountType]
    account: AccountReferenceInput

    """
    Filter on whether the account is a host or not
    """
    isHostAccount: Boolean

    """
    Filter on (un)approved collectives
    """
    isApproved: Boolean

    """
    Filter on archived collectives
    """
    isArchived: Boolean

    """
    Whether incognito profiles should be included in the result. Only works if requesting user is an admin of the account.
    """
    includeIncognito: Boolean = true

    """
    A term to search membership. Searches in collective tags, name, slug, members description and role.
    """
    searchTerm: String

    """
    Filters on the Host fees structure applied to this account
    """
    hostFeesStructure: HostFeeStructure

    """
    Order of the results
    """
    orderBy: ChronologicalOrderInput! = { field: CREATED_AT, direction: ASC }
  ): MemberOfCollection
  transactions(
    type: TransactionType
    limit: Int = 100
    offset: Int = 0
    orderBy: ChronologicalOrderInput = { field: CREATED_AT, direction: DESC }

    """
    If the account is a user and this field is true, contributions from the
    incognito profile will be included too (admins only)
    """
    includeIncognitoTransactions: Boolean! = false
  ): TransactionCollection!
  orders(
    limit: Int = 100
    offset: Int = 0
    filter: AccountOrdersFilter
    status: [OrderStatus]
    tierSlug: String

    """
    Only returns orders that have an subscription (monthly/yearly)
    """
    onlySubscriptions: Boolean

    """
    Whether outgoing incognito contributions should be included. Only works when user is an admin.
    """
    includeIncognito: Boolean
    orderBy: ChronologicalOrderInput = { field: CREATED_AT, direction: DESC }
  ): OrderCollection!
  settings: JSON!
  conversations(
    limit: Int
    offset: Int

    """
    Only return conversations matching this tag
    """
    tag: String
  ): ConversationCollection

  """
  Returns conversation's tags for collective sorted by popularity
  """
  conversationsTags(limit: Int = 30): [TagStat]

  """
  Returns expense tags for collective sorted by popularity
  """
  expensesTags(limit: Int = 30): [TagStat]
  transferwise: TransferWise

  """
  The list of payout methods that this collective can use to get paid
  """
  payoutMethods: [PayoutMethod]

  """
  The list of payment methods that this collective can use to pay for Orders
  """
  paymentMethods(
    types: [String]
    type: [String]
    service: [PaymentMethodService]

    """
    Whether to include expired payment methods. Payment methods expired since more than 6 months will never be returned.
    """
    includeExpired: Boolean
  ): [PaymentMethod]!

  """
  The list of connected accounts (Stripe, Twitter, etc ...)
  """
  connectedAccounts: [ConnectedAccount]

  """
  The address associated to this account. This field is always public for collectives and events.
  """
  location: Location
  categories: [String]!
  stats: AccountStats
  updates(
    """
    The number of results to fetch (default 10, max 1000)
    """
    limit: Int = 10

    """
    The offset to use to fetch
    """
    offset: Int = 0
    onlyPublishedUpdates: Boolean
    onlyChangelogUpdates: Boolean
    orderBy: ChronologicalOrderInput! = { field: CREATED_AT, direction: DESC }
    searchTerm: String
  ): UpdateCollection!

  """
  Describes the features enabled and available for this account
  """
  features: CollectiveFeatures!
  virtualCards(
    limit: Int = 100
    offset: Int = 0
    state: String = null
    merchantAccount: AccountReferenceInput = null

    """
    Only return expenses that were created after this date
    """
    dateFrom: ISODateTime = null

    """
    Only return expenses that were created before this date
    """
    dateTo: ISODateTime = null
  ): VirtualCardCollection!
  virtualCardMerchants(limit: Int = 100, offset: Int = 0): AccountCollection!

  """
  Returns the Fiscal Host
  """
  host: Host

  """
  Describe how the host charges the collective
  """
  hostFeesStructure: HostFeeStructure

  """
  Fees percentage that the host takes for this collective
  """
  hostFeePercent: Float

  """
  How much platform fees are charged for this account
  """
  platformFeePercent: Int!

  """
  Date of approval by the Fiscal Host.
  """
  approvedAt: DateTime

  """
  Returns whether it's approved by the Fiscal Host
  """
  isApproved: Boolean!

  """
  Number of unique financial contributors.
  """
  totalFinancialContributors(
    """
    Type of account (COLLECTIVE/EVENT/ORGANIZATION/INDIVIDUAL)
    """
    accountType: AccountType
  ): Int!
  tiers: TierCollection!

  """
  All the persons and entities that contribute to this account
  """
  contributors(
    """
    The number of results to fetch (default 10, max 1000)
    """
    limit: Int = 10

    """
    The offset to use to fetch
    """
    offset: Int = 0
    roles: [MemberRole]
  ): ContributorCollection!

  """
  Returns true if a custom contribution to Open Collective can be submitted for contributions made to this account
  """
  platformContributionAvailable: Boolean!

  """
  Amount of money in cents in the currency of the account currently available to spend
  """
  balance: Int @deprecated(reason: "2020/04/09 - Should not have been introduced. Use stats.balance.value")
  contributionPolicy: String
}

input FundCreateInput {
  name: String!
  slug: String!
  description: String!
  tags: [String]
  settings: JSON
}

"""
Input type for guest contributions
"""
input GuestInfoInput {
  """
  Contributor's email
  """
  email: EmailAddress!

  """
  Full name of the user
  """
  name: String

  """
  The unique guest token
  """
  token: String

  """
  Address of the user, mandatory when amount is above $5000.
  """
  location: LocationInput
}

"""
This represents an Host account
"""
type Host implements Account & AccountWithContributions {
  id: String
  legacyId: Int

  """
  The slug identifying the account (ie: babel)
  """
  slug: String
  type: AccountType
  name: String
  description: String
  longDescription: String
  tags: [String]
  website: String
  twitterHandle: String
  githubHandle: String
  currency: String
  expensePolicy: String

  """
  Defines if the contributors wants to be incognito (name not displayed)
  """
  isIncognito: Boolean!
  imageUrl(height: Int, format: ImageFormat): String
  backgroundImageUrl(height: Int, format: ImageFormat): String

  """
  The time of creation
  """
  createdAt: DateTime
  updatedAt: DateTime

  """
  Returns whether this account is archived
  """
  isArchived: Boolean

  """
  Returns whether the account accepts financial contributions.
  """
  isActive: Boolean

  """
  Returns whether the account is setup to Host collectives.
  """
  isHost: Boolean

  """
  Returns true if the remote user is an admin of this account
  """
  isAdmin: Boolean!

  """
  Get all members (admins, members, backers, followers)
  """
  members(
    limit: Int = 100
    offset: Int = 0
    role: [MemberRole]
    accountType: [AccountType]

    """
    Admin only. To filter on the email address of a member, useful to check if a member exists.
    """
    email: EmailAddress

    """
    Order of the results
    """
    orderBy: ChronologicalOrderInput! = { field: CREATED_AT, direction: ASC }
  ): MemberCollection
  memberOf(
    limit: Int
    offset: Int
    role: [MemberRole]
    accountType: [AccountType]
    account: AccountReferenceInput

    """
    Filter on whether the account is a host or not
    """
    isHostAccount: Boolean

    """
    Filter on (un)approved collectives
    """
    isApproved: Boolean

    """
    Filter on archived collectives
    """
    isArchived: Boolean

    """
    Whether incognito profiles should be included in the result. Only works if requesting user is an admin of the account.
    """
    includeIncognito: Boolean = true

    """
    A term to search membership. Searches in collective tags, name, slug, members description and role.
    """
    searchTerm: String

    """
    Filters on the Host fees structure applied to this account
    """
    hostFeesStructure: HostFeeStructure

    """
    Order of the results
    """
    orderBy: ChronologicalOrderInput! = { field: CREATED_AT, direction: ASC }
  ): MemberOfCollection
  transactions(
    type: TransactionType
    limit: Int = 100
    offset: Int = 0
    orderBy: ChronologicalOrderInput = { field: CREATED_AT, direction: DESC }

    """
    If the account is a user and this field is true, contributions from the
    incognito profile will be included too (admins only)
    """
    includeIncognitoTransactions: Boolean! = false
  ): TransactionCollection!
  orders(
    limit: Int = 100
    offset: Int = 0
    filter: AccountOrdersFilter
    status: [OrderStatus]
    tierSlug: String

    """
    Only returns orders that have an subscription (monthly/yearly)
    """
    onlySubscriptions: Boolean

    """
    Whether outgoing incognito contributions should be included. Only works when user is an admin.
    """
    includeIncognito: Boolean
    orderBy: ChronologicalOrderInput = { field: CREATED_AT, direction: DESC }
  ): OrderCollection!
  settings: JSON!
  conversations(
    limit: Int
    offset: Int

    """
    Only return conversations matching this tag
    """
    tag: String
  ): ConversationCollection

  """
  Returns conversation's tags for collective sorted by popularity
  """
  conversationsTags(limit: Int = 30): [TagStat]

  """
  Returns expense tags for collective sorted by popularity
  """
  expensesTags(limit: Int = 30): [TagStat]
  transferwise: TransferWise

  """
  The list of payout methods that this collective can use to get paid
  """
  payoutMethods: [PayoutMethod]

  """
  The list of payment methods that this collective can use to pay for Orders
  """
  paymentMethods(
    types: [String]
    type: [String]
    service: [PaymentMethodService]

    """
    Whether to include expired payment methods. Payment methods expired since more than 6 months will never be returned.
    """
    includeExpired: Boolean
  ): [PaymentMethod]!

  """
  The list of connected accounts (Stripe, Twitter, etc ...)
  """
  connectedAccounts: [ConnectedAccount]

  """
  The address associated to this account. This field is always public for collectives and events.
  """
  location: Location
  categories: [String]!
  stats: AccountStats
  updates(
    """
    The number of results to fetch (default 10, max 1000)
    """
    limit: Int = 10

    """
    The offset to use to fetch
    """
    offset: Int = 0
    onlyPublishedUpdates: Boolean
    onlyChangelogUpdates: Boolean
    orderBy: ChronologicalOrderInput! = { field: CREATED_AT, direction: DESC }
    searchTerm: String
  ): UpdateCollection!

  """
  Describes the features enabled and available for this account
  """
  features: CollectiveFeatures!
  virtualCards(
    limit: Int = 100
    offset: Int = 0
    state: String = null
    merchantAccount: AccountReferenceInput = null

    """
    Only return expenses that were created after this date
    """
    dateFrom: ISODateTime = null

    """
    Only return expenses that were created before this date
    """
    dateTo: ISODateTime = null
  ): VirtualCardCollection!
  virtualCardMerchants(limit: Int = 100, offset: Int = 0): AccountCollection!

  """
  Number of unique financial contributors.
  """
  totalFinancialContributors(
    """
    Type of account (COLLECTIVE/EVENT/ORGANIZATION/INDIVIDUAL)
    """
    accountType: AccountType
  ): Int!
  tiers: TierCollection!

  """
  All the persons and entities that contribute to this account
  """
  contributors(
    """
    The number of results to fetch (default 10, max 1000)
    """
    limit: Int = 10

    """
    The offset to use to fetch
    """
    offset: Int = 0
    roles: [MemberRole]
  ): ContributorCollection!

  """
  How much platform fees are charged for this account
  """
  platformFeePercent: Int!

  """
  Returns true if a custom contribution to Open Collective can be submitted for contributions made to this account
  """
  platformContributionAvailable: Boolean!

  """
  Amount of money in cents in the currency of the account currently available to spend
  """
  balance: Int @deprecated(reason: "2020/04/09 - Should not have been introduced. Use stats.balance.value")
  contributionPolicy: String
  hostFeePercent: Int
  totalHostedCollectives: Int
  isOpenToApplications: Boolean
  termsUrl: URL
  plan: HostPlan!
  hostMetrics(
    """
    Inferior date limit in which we're calculating the metrics
    """
    from: String

    """
    Superior date limit in which we're calculating the metrics
    """
    to: String
  ): HostMetrics!

  """
  The list of payment methods (Stripe, Paypal, manual bank transfer, etc ...) the Host can accept for its Collectives
  """
  supportedPaymentMethods: [PaymentMethodLegacyType]
  bankAccount: PayoutMethod

  """
  Paypal preapproval info. Returns null if PayPal account is not connected.
  """
  paypalPreApproval: PaymentMethod

  """
  If the host supports PayPal, this will contain the client ID to use in the frontend
  """
  paypalClientId: String

  """
  The list of payout methods this Host accepts for its expenses
  """
  supportedPayoutMethods: [PayoutMethodType]

  """
  Transferwise balances. Returns null if Transferwise account is not connected.
  """
  transferwiseBalances: [Amount]

  """
  Pending applications for this host
  """
  pendingApplications(
    """
    The number of results to fetch (default 10, max 1000)
    """
    limit: Int = 10

    """
    The offset to use to fetch
    """
    offset: Int = 0

    """
    A term to search membership. Searches in collective tags, name, slug, members description and role.
    """
    searchTerm: String

    """
    Order of the results
    """
    orderBy: ChronologicalOrderInput! = { field: CREATED_AT, direction: DESC }
  ): HostApplicationCollection!
  hostedVirtualCards(
    limit: Int = 100
    offset: Int = 0
    state: String = null
    merchantAccount: AccountReferenceInput = null
    collectiveAccountIds: [AccountReferenceInput] = null
  ): VirtualCardCollection!
  hostedVirtualCardMerchants(limit: Int = 100, offset: Int = 0): AccountCollection!
  hostedVirtualCardCollectives(limit: Int = 100, offset: Int = 0): AccountCollection!
}

type HostApplication {
  id: String!

  """
  The account who applied to this host
  """
  account: Account!

  """
  The date on which the item was created
  """
  createdAt: DateTime!
  status: HostApplicationStatus
  message: String
  customData: JSON
}

"""
A collection of "HostApplication"
"""
type HostApplicationCollection implements Collection {
  offset: Int
  limit: Int
  totalCount: Int
  nodes: [HostApplication]
}

enum HostApplicationStatus {
  PENDING
  APPROVED
  REJECTED
  EXPIRED
}

"""
A collection of "Hosts"
"""
type HostCollection implements Collection {
  offset: Int
  limit: Int
  totalCount: Int
  nodes: [Host]
}

"""
All supported expense types
"""
enum HostFeeStructure {
  """
  Use global host fees
  """
  DEFAULT

  """
  Custom fee for this Collective only
  """
  CUSTOM_FEE

  """
  Set a monthly retainer for this Collective
  """
  MONTHLY_RETAINER
}

"""
Host metrics related to collected and pending fees/tips.
"""
type HostMetrics {
  """
  Amount collected in host fees for given period
  """
  hostFees: Amount

  """
  Amount collected in platform fees for given period
  """
  platformFees: Amount

  """
  Amount collected in platform fees requiring settlement
  """
  pendingPlatformFees: Amount

  """
  Amount collected in platform tips for given period
  """
  platformTips: Amount

  """
  Amount collected in platform tips requiring settlement
  """
  pendingPlatformTips: Amount

  """
  Amount in host fee shared with the platform
  """
  hostFeeShare: Amount

  """
  Amount in host fee shared  requiring settlement
  """
  pendingHostFeeShare: Amount

  """
  Amount in host fee shared not requiring settlement
  """
  settledHostFeeShare: Amount

  """
  Total amount managed on behalf of hosted collectives
  """
  totalMoneyManaged: Amount

  """
  Host fee sharing percent
  """
  hostFeeSharePercent: Int
}

"""
The name of the current plan and its characteristics.
"""
type HostPlan {
  """
  The public id identifying the account (ie: 5v08jk63-w4g9nbpz-j7qmyder-p7ozax5g)
  """
  id: String

  """
  The name of the plan
  """
  name: String

  """
  Number of collectives hosted
  """
  hostedCollectives: Int

  """
  Max number of collectives than can be hosted
  """
  hostedCollectivesLimit: Int

  """
  Whether this plan allows to use the added funds feature
  """
  addedFunds: Int

  """
  Amount limit for the added funds feature under this plan
  """
  addedFundsLimit: Int

  """
  Whether this plan allows to use the host dashboard
  """
  hostDashboard: Boolean

  """
  Whether this plan allows to use the manual payments feature
  """
  manualPayments: Boolean

  """
  Whether this plan allows to use the bank transfers feature
  """
  bankTransfers: Int

  """
  Amount limit for the bank transfers feature under this plan
  """
  bankTransfersLimit: Int

  """
  Whether this plan allows to use the transferwise payouts feature
  """
  transferwisePayouts: Int

  """
  Amount limit for the transferwise payouts feature under this plan
  """
  transferwisePayoutsLimit: Int

  """
  Ability to charge Host Fees.
  """
  hostFees: Boolean

  """
  Charge on revenues made through Host Fees.
  """
  hostFeeSharePercent: Int

  """
  Ability to collect Platform Tips.
  """
  platformTips: Boolean
}

enum ImageFormat {
  txt
  png
  jpg
  gif
  svg
}

"""
This represents an Individual account
"""
type Individual implements Account {
  id: String
  legacyId: Int

  """
  The slug identifying the account (ie: babel)
  """
  slug: String
  type: AccountType
  name: String
  description: String
  longDescription: String
  tags: [String]
  website: String
  twitterHandle: String
  githubHandle: String
  currency: String
  expensePolicy: String

  """
  Defines if the contributors wants to be incognito (name not displayed)
  """
  isIncognito: Boolean!
  imageUrl(height: Int, format: ImageFormat): String
  backgroundImageUrl(height: Int, format: ImageFormat): String

  """
  The time of creation
  """
  createdAt: DateTime
  updatedAt: DateTime

  """
  Returns whether this account is archived
  """
  isArchived: Boolean

  """
  Returns whether the account accepts financial contributions.
  """
  isActive: Boolean

  """
  Returns whether the account is setup to Host collectives.
  """
  isHost: Boolean

  """
  Returns true if the remote user is an admin of this account
  """
  isAdmin: Boolean!

  """
  Get all members (admins, members, backers, followers)
  """
  members(
    limit: Int = 100
    offset: Int = 0
    role: [MemberRole]
    accountType: [AccountType]

    """
    Admin only. To filter on the email address of a member, useful to check if a member exists.
    """
    email: EmailAddress

    """
    Order of the results
    """
    orderBy: ChronologicalOrderInput! = { field: CREATED_AT, direction: ASC }
  ): MemberCollection
  memberOf(
    limit: Int
    offset: Int
    role: [MemberRole]
    accountType: [AccountType]
    account: AccountReferenceInput

    """
    Filter on whether the account is a host or not
    """
    isHostAccount: Boolean

    """
    Filter on (un)approved collectives
    """
    isApproved: Boolean

    """
    Filter on archived collectives
    """
    isArchived: Boolean

    """
    Whether incognito profiles should be included in the result. Only works if requesting user is an admin of the account.
    """
    includeIncognito: Boolean = true

    """
    A term to search membership. Searches in collective tags, name, slug, members description and role.
    """
    searchTerm: String

    """
    Filters on the Host fees structure applied to this account
    """
    hostFeesStructure: HostFeeStructure

    """
    Order of the results
    """
    orderBy: ChronologicalOrderInput! = { field: CREATED_AT, direction: ASC }
  ): MemberOfCollection
  transactions(
    type: TransactionType
    limit: Int = 100
    offset: Int = 0
    orderBy: ChronologicalOrderInput = { field: CREATED_AT, direction: DESC }

    """
    If the account is a user and this field is true, contributions from the
    incognito profile will be included too (admins only)
    """
    includeIncognitoTransactions: Boolean! = false
  ): TransactionCollection!
  orders(
    limit: Int = 100
    offset: Int = 0
    filter: AccountOrdersFilter
    status: [OrderStatus]
    tierSlug: String

    """
    Only returns orders that have an subscription (monthly/yearly)
    """
    onlySubscriptions: Boolean

    """
    Whether outgoing incognito contributions should be included. Only works when user is an admin.
    """
    includeIncognito: Boolean
    orderBy: ChronologicalOrderInput = { field: CREATED_AT, direction: DESC }
  ): OrderCollection!
  settings: JSON!
  conversations(
    limit: Int
    offset: Int

    """
    Only return conversations matching this tag
    """
    tag: String
  ): ConversationCollection

  """
  Returns conversation's tags for collective sorted by popularity
  """
  conversationsTags(limit: Int = 30): [TagStat]

  """
  Returns expense tags for collective sorted by popularity
  """
  expensesTags(limit: Int = 30): [TagStat]
  transferwise: TransferWise

  """
  The list of payout methods that this collective can use to get paid
  """
  payoutMethods: [PayoutMethod]

  """
  The list of payment methods that this collective can use to pay for Orders
  """
  paymentMethods(
    types: [String]
    type: [String]
    service: [PaymentMethodService]

    """
    Whether to include expired payment methods. Payment methods expired since more than 6 months will never be returned.
    """
    includeExpired: Boolean
  ): [PaymentMethod]!

  """
  The list of connected accounts (Stripe, Twitter, etc ...)
  """
  connectedAccounts: [ConnectedAccount]

  """
  Address. This field is public for hosts, otherwise:
    - Users can see their own address
    - Hosts can see the address of users submitting expenses to their collectives
  """
  location: Location
  categories: [String]!
  stats: AccountStats
  updates(
    """
    The number of results to fetch (default 10, max 1000)
    """
    limit: Int = 10

    """
    The offset to use to fetch
    """
    offset: Int = 0
    onlyPublishedUpdates: Boolean
    onlyChangelogUpdates: Boolean
    orderBy: ChronologicalOrderInput! = { field: CREATED_AT, direction: DESC }
    searchTerm: String
  ): UpdateCollection!

  """
  Describes the features enabled and available for this account
  """
  features: CollectiveFeatures!
  virtualCards(
    limit: Int = 100
    offset: Int = 0
    state: String = null
    merchantAccount: AccountReferenceInput = null

    """
    Only return expenses that were created after this date
    """
    dateFrom: ISODateTime = null

    """
    Only return expenses that were created before this date
    """
    dateTo: ISODateTime = null
  ): VirtualCardCollection!
  virtualCardMerchants(limit: Int = 100, offset: Int = 0): AccountCollection!
  firstName: String @deprecated(reason: "2020-10-12: Use the name field")
  lastName: String @deprecated(reason: "2020-10-12: Use the name field")
  email: String
  isGuest: Boolean!
  isFollowingConversation(id: String!): Boolean!
  hasTwoFactorAuth: Boolean

  """
  If the individual is a host account, this will return the matching Host object
  """
  host: Host
  hasSeenLatestChangelogEntry: Boolean!
}

input IndividualCreateInput {
  name: String!
  email: String!
}

scalar IsoDateString

"""
ISO-8601 date
"""
scalar ISODateTime

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject

"""
Type for a required legal document
"""
enum LegalDocumentType {
  """
  US tax form (W9)
  """
  US_TAX_FORM
}

"""
Type for Geographic location
"""
type Location {
  """
  A short name for the location (eg. Open Collective Headquarters)
  """
  name: String

  """
  Postal address without country (eg. 12 opensource avenue, 7500 Paris)
  """
  address: String

  """
  Two letters country code (eg. FR, BE...etc)
  """
  country: String

  """
  Latitude
  """
  lat: Float

  """
  Longitude
  """
  long: Float

  """
  Structured JSON address
  """
  structured: JSON
}

"""
Input type for Geographic location
"""
input LocationInput {
  """
  A short name for the location (eg. Open Collective Headquarters)
  """
  name: String

  """
  Postal address without country (eg. 12 opensource avenue, 7500 Paris)
  """
  address: String

  """
  Two letters country code (eg. FR, BE...etc)
  """
  country: CountryISO

  """
  Latitude
  """
  lat: Float

  """
  Longitude
  """
  long: Float

  """
  Structured JSON address
  """
  structured: JSON
}

"""
This represents a Member relationship (ie: Organization backing a Collective)
"""
type Member {
  id: String
  role: MemberRole
  tier: Tier
  createdAt: DateTime
  updatedAt: DateTime
  since: DateTime

  """
  Total amount donated
  """
  totalDonations: Amount!

  """
  Custom user message from member to the collective
  """
  publicMessage: String
  account: Account
}

"""
A collection of "Members" (ie: Organization backing a Collective)
"""
type MemberCollection implements Collection {
  offset: Int
  limit: Int
  totalCount: Int
  nodes: [Member]
}

"""
This represents a MemberOf relationship (ie: Collective backed by an Organization)
"""
type MemberOf {
  id: String
  role: MemberRole
  tier: Tier
  createdAt: DateTime
  updatedAt: DateTime
  since: DateTime

  """
  Total amount donated
  """
  totalDonations: Amount!

  """
  Custom user message from member to the collective
  """
  publicMessage: String
  account: Account
}

"""
A collection of "MemberOf" (ie: Collective backed by an Organization)
"""
type MemberOfCollection implements Collection {
  offset: Int
  limit: Int
  totalCount: Int
  nodes: [MemberOf]
}

"""
All member roles
"""
enum MemberRole {
  BACKER
  ADMIN
  CONTRIBUTOR
  HOST
  ATTENDEE
  MEMBER
  FUNDRAISER
  FOLLOWER
  ACCOUNTANT
}

"""
This is the root mutation
"""
type Mutation {
  """
  Add funds to the given account
  """
  addFunds(
    fromAccount: AccountReferenceInput!
    account: AccountReferenceInput!
    amount: AmountInput!
    description: String!
    hostFeePercent: Float!

    """
    Can only be set if root
    """
    platformFeePercent: Float
  ): Order!
  createCollective(
    """
    Information about the collective to create (name, slug, description, tags, ...)
    """
    collective: CollectiveCreateInput!

    """
    Reference to the host to apply on creation.
    """
    host: AccountReferenceInput

    """
    User information to create along with the collective
    """
    user: IndividualCreateInput

    """
    Whether to trigger the automated approval for Open Source collectives with GitHub.
    """
    automateApprovalWithGithub: Boolean = false

    """
    A message to attach for the host to review the application
    """
    message: String

    """
    Further information about collective applying to host
    """
    applicationData: JSON
  ): Collective
  createFund(
    """
    Information about the collective to create (name, slug, description, tags, ...)
    """
    fund: FundCreateInput!

    """
    Reference to the host to apply on creation.
    """
    host: AccountReferenceInput
  ): Fund
  createOrganization(
    """
    Information about the organization to create (name, slug, description, website, ...)
    """
    organization: OrganizationCreateInput!
  ): Organization
  createProject(
    """
    Information about the Project to create (name, slug, description, tags, settings)
    """
    project: ProjectCreateInput!

    """
    Reference to the parent Account creating the Project.
    """
    parent: AccountReferenceInput
  ): Project
  editComment(comment: CommentUpdateInput!): Comment
  deleteComment(id: String!): Comment
  createComment(comment: CommentCreateInput!): Comment

  """
  Connect external account to Open Collective Account
  """
  createConnectedAccount(
    """
    Connected Account data
    """
    connectedAccount: ConnectedAccountCreateInput!

    """
    Account where the external account will be connected
    """
    account: AccountReferenceInput!
  ): ConnectedAccount

  """
  Delete ConnectedAccount
  """
  deleteConnectedAccount(
    """
    ConnectedAccount reference containing either id or legacyId
    """
    connectedAccount: ConnectedAccountReferenceInput!
  ): ConnectedAccount

  """
  Create a conversation
  """
  createConversation(
    """
    Conversation's title
    """
    title: String!

    """
    The body of the conversation initial comment
    """
    html: String!

    """
    ID of the Collective where the conversation will be created
    """
    CollectiveId: String!

    """
    A list of tags for this conversation
    """
    tags: [String]
  ): Conversation
  editConversation(
    """
    Conversation's id
    """
    id: String!

    """
    Conversation's title
    """
    title: String!

    """
    A list of tags for this conversation
    """
    tags: [String]
  ): Conversation

  """
  Returns true if user is following, false otherwise. Must be authenticated.
  """
  followConversation(
    """
    Conversation's id
    """
    id: String!

    """
    Set this to false to unfollow the conversation
    """
    isActive: Boolean = true
  ): Boolean

  """
  Submit an expense to a collective
  """
  createExpense(
    """
    Expense data
    """
    expense: ExpenseCreateInput!

    """
    Account where the expense will be created
    """
    account: AccountReferenceInput!
  ): Expense!

  """
  To update an existing expense
  """
  editExpense(
    """
    Expense data
    """
    expense: ExpenseUpdateInput!

    """
    Expense draft key if invited to submit expense
    """
    draftKey: String
  ): Expense!

  """
  Delete an expense. Only work if the expense is rejected - please check permissions.canDelete.
  """
  deleteExpense(
    """
    Reference of the expense to delete
    """
    expense: ExpenseReferenceInput!
  ): Expense!

  """
  Process the expense with the given action
  """
  processExpense(
    """
    Reference of the expense to process
    """
    expense: ExpenseReferenceInput!

    """
    The action to trigger
    """
    action: ExpenseProcessAction!

    """
    If action is related to a payment, this object used for the payment parameters
    """
    paymentParams: ProcessExpensePaymentParams
  ): Expense!

  """
  Persist an Expense as a draft and invite someone to edit and submit it.
  """
  draftExpenseAndInviteUser(
    """
    Expense data
    """
    expense: ExpenseInviteDraftInput!

    """
    Account where the expense will be created
    """
    account: AccountReferenceInput!
  ): Expense!

  """
  To verify an unverified expense.
  """
  resendDraftExpenseInvite(
    """
    Reference of the expense to process
    """
    expense: ExpenseReferenceInput!
  ): Expense!

  """
  To verify and unverified expense.
  """
  verifyExpense(
    """
    Reference of the expense to process
    """
    expense: ExpenseReferenceInput!

    """
    Expense draft key if invited to submit expense
    """
    draftKey: String
  ): Expense!
  addEmojiReaction(
    """
    The emoji associated with the reaction
    """
    emoji: String!

    """
    A unique identifier for the comment id associated with this reaction
    """
    comment: CommentReferenceInput

    """
    A unique identifier for the update id associated with this reaction
    """
    update: UpdateReferenceInput
  ): EmojiReactionResponse!
  removeEmojiReaction(
    comment: CommentReferenceInput
    update: UpdateReferenceInput
    emoji: String!
  ): EmojiReactionResponse!

  """
  Apply to an host with a collective
  """
  applyToHost(
    """
    Account applying to the host.
    """
    collective: AccountReferenceInput!

    """
    Host to apply to.
    """
    host: AccountReferenceInput!

    """
    A message to attach for the host to review the application
    """
    message: String

    """
    Further information about collective applying to host
    """
    applicationData: JSON
  ): Account!

  """
  Reply to a host application
  """
  processHostApplication(
    """
    The account that applied to the host
    """
    account: AccountReferenceInput!

    """
    The host concerned by the application
    """
    host: AccountReferenceInput!

    """
    What to do with the application
    """
    action: ProcessHostApplicationAction!

    """
    A message to attach as a reason for the action
    """
    message: String
  ): ProcessHostApplicationResponse!

  """
  Edit the settings for the given account
  """
  editAccountSetting(
    """
    Account where the settings will be updated
    """
    account: AccountReferenceInput!

    """
    The key that you want to edit in settings
    """
    key: AccountSettingsKey!

    """
    The value to set for this key
    """
    value: JSON!
  ): Account!

  """
  An endpoint for hosts to edit the fees structure of their hosted accounts
  """
  editAccountFeeStructure(
    """
    Account where the settings will be updated
    """
    account: AccountReferenceInput!

    """
    The host fee percent to apply to this account
    """
    hostFeePercent: Float!

    """
    If using a custom fee, set this to true
    """
    isCustomFee: Boolean!
  ): Account!

  """
  Add 2FA to the Individual if it does not have it
  """
  addTwoFactorAuthTokenToIndividual(
    """
    Individual that will have 2FA added to it
    """
    account: AccountReferenceInput!

    """
    The generated secret to save to the Individual
    """
    token: String!
  ): AddTwoFactorAuthTokenToIndividualResponse!

  """
  Remove 2FA from the Individual if it has been enabled
  """
  removeTwoFactorAuthTokenFromIndividual(
    """
    Account that will have 2FA removed from it
    """
    account: AccountReferenceInput!

    """
    The 6-digit 2FA code
    """
    code: String!
  ): Individual!

  """
  Update the plan
  """
  editHostPlan(
    """
    Account where the host plan will be edited.
    """
    account: AccountReferenceInput!

    """
    The name of the plan to subscribe to.
    """
    plan: String!
  ): Host!

  """
  Edit key properties of an account.
  """
  editAccount(
    """
    Account to edit.
    """
    account: AccountUpdateInput!
  ): Host!

  """
  Sends an email for guest to confirm their emails and create their Open Collective account
  """
  sendGuestConfirmationEmail(
    """
    The email to validate
    """
    email: EmailAddress!
  ): Boolean!

  """
  Mark an account as confirmed
  """
  confirmGuestAccount(
    """
    The email to confirm
    """
    email: EmailAddress!

    """
    The key that you want to edit in settings
    """
    emailConfirmationToken: String!
  ): ConfirmGuestAccountResponse!

  """
  Create a new Payout Method to get paid through the platform
  """
  createPayoutMethod(
    """
    Payout Method data
    """
    payoutMethod: PayoutMethodInput!

    """
    Account where the payout method will be associated
    """
    account: AccountReferenceInput!
  ): PayoutMethod

  """
  Remove the given payout method
  """
  removePayoutMethod(payoutMethodId: String!): PayoutMethod!

  """
  To submit a new order
  """
  createOrder(order: OrderCreateInput!): OrderWithPayment!

  """
  Cancel an order
  """
  cancelOrder(
    """
    Object matching the OrderReferenceInput (id)
    """
    order: OrderReferenceInput!
  ): Order

  """
  Update an Order's amount, tier, or payment method
  """
  updateOrder(
    """
    Reference to the Order to update
    """
    order: OrderReferenceInput!

    """
    Reference to a Payment Method to update the order with
    """
    paymentMethod: PaymentMethodReferenceInput

    """
    To update the order with a PayPal subscription
    """
    paypalSubscriptionId: String

    """
    Reference to a Tier to update the order with
    """
    tier: TierReferenceInput

    """
    An Amount to update the order to
    """
    amount: AmountInput
  ): Order
  confirmOrder(
    order: OrderReferenceInput!

    """
    If the order was made as a guest, you can use this field to authenticate
    """
    guestToken: String
  ): OrderWithPayment!

  """
  A mutation for the host to approve or reject an order
  """
  processPendingOrder(order: OrderReferenceInput!, action: ProcessOrderAction!): Order!

  """
  Add a new payment method to be used with an Order
  """
  addCreditCard(
    """
    The credit card info
    """
    creditCardInfo: CreditCardCreateInput!

    """
    Name associated to this credit card
    """
    name: String!

    """
    Whether this credit card should be saved for future payments
    """
    isSavedForLater: Boolean = true

    """
    Account to add the credit card to
    """
    account: AccountReferenceInput!
  ): CreditCardWithStripeError!

  """
  Confirm a credit card is ready for use after strong customer authentication
  """
  confirmCreditCard(paymentMethod: PaymentMethodReferenceInput!): CreditCardWithStripeError!

  """
  Add platform tips to a transaction
  """
  addPlatformTipToTransaction(
    """
    Reference to the transaction in the platform tip
    """
    transaction: TransactionReferenceInput!

    """
    Amount of the platform tip
    """
    amount: AmountInput!
  ): Transaction!

  """
  Refunds transaction
  """
  refundTransaction(
    """
    Reference of the transaction to refund
    """
    transaction: TransactionReferenceInput!
  ): Transaction

  """
  Rejects transaction, removes member from Collective, and sends a message to the contributor
  """
  rejectTransaction(
    """
    Reference of the transaction to refund
    """
    transaction: TransactionReferenceInput!

    """
    Message to send to the contributor whose contribution has been rejected
    """
    message: String
  ): Transaction!

  """
  Edit the public message for the given Member of a Collective
  """
  editPublicMessage(
    """
    Reference to an account for the donating Collective
    """
    fromAccount: AccountReferenceInput!

    """
    Reference to an account for the receiving Collective
    """
    toAccount: AccountReferenceInput!

    """
    New public message
    """
    message: String
  ): Member!
  createUpdate(update: UpdateCreateInput!): Update!
  editUpdate(update: UpdateUpdateInput!): Update!
  publishUpdate(id: String!, notificationAudience: UpdateAudience): Update!
  unpublishUpdate(id: String!): Update!
  deleteUpdate(id: String!): Update!

  """
  Update the time which the user viewed the changelog updates
  """
  setChangelogViewDate(changelogViewDate: DateTime!): Individual!

  """
  Assign new Virtual Card information to existing hosted collective
  """
  assignNewVirtualCard(
    """
    Virtual Card data
    """
    virtualCard: VirtualCardInput!

    """
    Account where the virtual card will be associated
    """
    account: AccountReferenceInput!

    """
    Individual account responsible for the card
    """
    assignee: AccountReferenceInput!
  ): VirtualCard!

  """
  Edit existing Virtual Card information
  """
  editVirtualCard(
    """
    Virtual Card being edited its new values
    """
    virtualCard: VirtualCardUpdateInput!

    """
    The individual account reference to attach the Virtual Card to if desired
    """
    assignee: AccountReferenceInput
  ): VirtualCard!

  """
  Request Virtual Card to host
  """
  requestVirtualCard(
    """
    Request notes
    """
    notes: String

    """
    Purpose for this Virtual Card
    """
    purpose: String

    """
    Monthly budget you want for this Virtual Card
    """
    budget: Int

    """
    Account where the virtual card will be associated
    """
    account: AccountReferenceInput!
  ): Boolean

  """
  Pause active Virtual Card
  """
  pauseVirtualCard(
    """
    Virtual Card reference
    """
    virtualCard: VirtualCardReferenceInput!
  ): VirtualCard!

  """
  Resume paused Virtual Card
  """
  resumeVirtualCard(
    """
    Virtual Card reference
    """
    virtualCard: VirtualCardReferenceInput!
  ): VirtualCard!

  """
  Delete Virtual Card
  """
  deleteVirtualCard(
    """
    Virtual Card reference
    """
    virtualCard: VirtualCardReferenceInput!
  ): Boolean
}

input NewAccountOrganizationInput {
  name: String
  slug: String
  description: String
  website: String
}

input NewAccountOrReferenceInput {
  """
  The public id identifying the account (ie: dgm9bnk8-0437xqry-ejpvzeol-jdayw5re)
  """
  id: String

  """
  The internal id of the account (ie: 580)
  """
  legacyId: Int

  """
  The slug identifying the account (ie: babel for https://opencollective.com/babel)
  """
  slug: String
  name: String
  email: String
  organization: NewAccountOrganizationInput
  newsletterOptIn: Boolean
}

"""
Order model
"""
type Order {
  id: String!
  legacyId: Int!
  description: String
  amount: Amount!
  quantity: Int
  status: OrderStatus
  frequency: ContributionFrequency
  nextChargeDate: DateTime
  tier: Tier
  fromAccount: Account
  toAccount: Account

  """
  Transactions for this order ordered by createdAt ASC
  """
  transactions: [Transaction]!
  createdAt: DateTime
  updatedAt: DateTime

  """
  WARNING: Total amount donated between collectives, though there will be edge
  cases especially when looking on the Order level, as the order id is not used
  in calculating this.
  """
  totalDonations: Amount!
  paymentMethod: PaymentMethod

  """
  Platform contribution attached to the Order.
  """
  platformContributionAmount: Amount @deprecated(reason: "2021-06-07: Please use platformTipAmount")

  """
  Platform Tip attached to the Order.
  """
  platformTipAmount: Amount
  taxes: [OrderTax]!

  """
  This represents a MemberOf relationship (ie: Collective backed by an Individual) attached to the Order.
  """
  membership: MemberOf

  """
  The permissions given to current logged in user for this order
  """
  permissions: OrderPermissions!
}

"""
A collection of "Orders"
"""
type OrderCollection implements Collection {
  offset: Int
  limit: Int
  totalCount: Int
  nodes: [Order]
}

"""
Some context about how an order was created
"""
input OrderContextInput {
  """
  Whether this order was created using the embedded contribution flow
  """
  isEmbed: Boolean
}

"""
Input to create a new order
"""
input OrderCreateInput {
  quantity: Int! = 1

  """
  The contribution amount for 1 quantity, without platform contribution and taxes
  """
  amount: AmountInput!
  frequency: ContributionFrequency!

  """
  The profile making the order. Can be null for guest contributions.
  """
  fromAccount: AccountReferenceInput

  """
  The profile you want to contribute to
  """
  toAccount: AccountReferenceInput!

  """
  Use this when fromAccount is null to pass the guest info
  """
  guestInfo: GuestInfoInput

  """
  The payment method used for this order
  """
  paymentMethod: PaymentMethodInput

  """
  Platform contribution attached to this order
  """
  platformContributionAmount: AmountInput

  """
  Use this field to set the taxes associated to this order
  """
  taxes: [OrderTaxInput]

  """
  The tier you are contributing to
  """
  tier: TierReferenceInput

  """
  If the tier has some "customFields", use this field to set their values
  """
  customData: JSON

  """
  Some context about how this order was created
  """
  context: OrderContextInput
}

"""
Possible directions in which to order a list of items
"""
enum OrderDirection {
  ASC
  DESC
}

"""
Fields for the user permissions on an order
"""
type OrderPermissions {
  id: String!

  """
  Whether the current user can mark this order as expired
  """
  canMarkAsExpired: Boolean!

  """
  Whether the current user can mark this order as unpaid
  """
  canMarkAsPaid: Boolean!
}

input OrderReferenceInput {
  """
  The public id identifying the order (ie: dgm9bnk8-0437xqry-ejpvzeol-jdayw5re)
  """
  id: String
}

"""
All order statuses
"""
enum OrderStatus {
  ACTIVE
  CANCELLED
  ERROR
  EXPIRED
  NEW
  PAID
  PENDING
  PLEDGED
  REJECTED
  REQUIRE_CLIENT_CONFIRMATION
}

type OrderTax {
  type: OrderTaxType!
  percentage: Int!
}

"""
Input to set taxes for an order
"""
input OrderTaxInput {
  type: OrderTaxType!
  amount: AmountInput!

  """
  Country of the account ordering, to know from where to apply the tax
  """
  country: CountryISO

  """
  Tax identification number, if any
  """
  idNumber: String
}

"""
Type for a required legal document
"""
enum OrderTaxType {
  """
  European Value Added Tax
  """
  VAT

  """
  New Zealand Good and Services Tax
  """
  GST
}

type OrderWithPayment {
  """
  The order created
  """
  order: Order!

  """
  If donating as a guest, this will contain your guest token to confirm your order
  """
  guestToken: String

  """
  This field will be set if the order was created but there was an error with Stripe during the payment
  """
  stripeError: StripeError
}

"""
This represents an Organization account
"""
type Organization implements Account & AccountWithContributions {
  id: String
  legacyId: Int

  """
  The slug identifying the account (ie: babel)
  """
  slug: String
  type: AccountType
  name: String
  description: String
  longDescription: String
  tags: [String]
  website: String
  twitterHandle: String
  githubHandle: String
  currency: String
  expensePolicy: String

  """
  Defines if the contributors wants to be incognito (name not displayed)
  """
  isIncognito: Boolean!
  imageUrl(height: Int, format: ImageFormat): String
  backgroundImageUrl(height: Int, format: ImageFormat): String

  """
  The time of creation
  """
  createdAt: DateTime
  updatedAt: DateTime

  """
  Returns whether this account is archived
  """
  isArchived: Boolean

  """
  Returns whether the account accepts financial contributions.
  """
  isActive: Boolean

  """
  Returns whether the account is setup to Host collectives.
  """
  isHost: Boolean

  """
  Returns true if the remote user is an admin of this account
  """
  isAdmin: Boolean!

  """
  Get all members (admins, members, backers, followers)
  """
  members(
    limit: Int = 100
    offset: Int = 0
    role: [MemberRole]
    accountType: [AccountType]

    """
    Admin only. To filter on the email address of a member, useful to check if a member exists.
    """
    email: EmailAddress

    """
    Order of the results
    """
    orderBy: ChronologicalOrderInput! = { field: CREATED_AT, direction: ASC }
  ): MemberCollection
  memberOf(
    limit: Int
    offset: Int
    role: [MemberRole]
    accountType: [AccountType]
    account: AccountReferenceInput

    """
    Filter on whether the account is a host or not
    """
    isHostAccount: Boolean

    """
    Filter on (un)approved collectives
    """
    isApproved: Boolean

    """
    Filter on archived collectives
    """
    isArchived: Boolean

    """
    Whether incognito profiles should be included in the result. Only works if requesting user is an admin of the account.
    """
    includeIncognito: Boolean = true

    """
    A term to search membership. Searches in collective tags, name, slug, members description and role.
    """
    searchTerm: String

    """
    Filters on the Host fees structure applied to this account
    """
    hostFeesStructure: HostFeeStructure

    """
    Order of the results
    """
    orderBy: ChronologicalOrderInput! = { field: CREATED_AT, direction: ASC }
  ): MemberOfCollection
  transactions(
    type: TransactionType
    limit: Int = 100
    offset: Int = 0
    orderBy: ChronologicalOrderInput = { field: CREATED_AT, direction: DESC }

    """
    If the account is a user and this field is true, contributions from the
    incognito profile will be included too (admins only)
    """
    includeIncognitoTransactions: Boolean! = false
  ): TransactionCollection!
  orders(
    limit: Int = 100
    offset: Int = 0
    filter: AccountOrdersFilter
    status: [OrderStatus]
    tierSlug: String

    """
    Only returns orders that have an subscription (monthly/yearly)
    """
    onlySubscriptions: Boolean

    """
    Whether outgoing incognito contributions should be included. Only works when user is an admin.
    """
    includeIncognito: Boolean
    orderBy: ChronologicalOrderInput = { field: CREATED_AT, direction: DESC }
  ): OrderCollection!
  settings: JSON!
  conversations(
    limit: Int
    offset: Int

    """
    Only return conversations matching this tag
    """
    tag: String
  ): ConversationCollection

  """
  Returns conversation's tags for collective sorted by popularity
  """
  conversationsTags(limit: Int = 30): [TagStat]

  """
  Returns expense tags for collective sorted by popularity
  """
  expensesTags(limit: Int = 30): [TagStat]
  transferwise: TransferWise

  """
  The list of payout methods that this collective can use to get paid
  """
  payoutMethods: [PayoutMethod]

  """
  The list of payment methods that this collective can use to pay for Orders
  """
  paymentMethods(
    types: [String]
    type: [String]
    service: [PaymentMethodService]

    """
    Whether to include expired payment methods. Payment methods expired since more than 6 months will never be returned.
    """
    includeExpired: Boolean
  ): [PaymentMethod]!

  """
  The list of connected accounts (Stripe, Twitter, etc ...)
  """
  connectedAccounts: [ConnectedAccount]

  """
  Address. This field is public for hosts, otherwise:
    - Users can see the addresses of the collectives they're admin of
    - Hosts can see the address of organizations submitting expenses to their collectives
  """
  location: Location
  categories: [String]!
  stats: AccountStats
  updates(
    """
    The number of results to fetch (default 10, max 1000)
    """
    limit: Int = 10

    """
    The offset to use to fetch
    """
    offset: Int = 0
    onlyPublishedUpdates: Boolean
    onlyChangelogUpdates: Boolean
    orderBy: ChronologicalOrderInput! = { field: CREATED_AT, direction: DESC }
    searchTerm: String
  ): UpdateCollection!

  """
  Describes the features enabled and available for this account
  """
  features: CollectiveFeatures!
  virtualCards(
    limit: Int = 100
    offset: Int = 0
    state: String = null
    merchantAccount: AccountReferenceInput = null

    """
    Only return expenses that were created after this date
    """
    dateFrom: ISODateTime = null

    """
    Only return expenses that were created before this date
    """
    dateTo: ISODateTime = null
  ): VirtualCardCollection!
  virtualCardMerchants(limit: Int = 100, offset: Int = 0): AccountCollection!

  """
  Number of unique financial contributors.
  """
  totalFinancialContributors(
    """
    Type of account (COLLECTIVE/EVENT/ORGANIZATION/INDIVIDUAL)
    """
    accountType: AccountType
  ): Int!
  tiers: TierCollection!

  """
  All the persons and entities that contribute to this account
  """
  contributors(
    """
    The number of results to fetch (default 10, max 1000)
    """
    limit: Int = 10

    """
    The offset to use to fetch
    """
    offset: Int = 0
    roles: [MemberRole]
  ): ContributorCollection!

  """
  How much platform fees are charged for this account
  """
  platformFeePercent: Int!

  """
  Returns true if a custom contribution to Open Collective can be submitted for contributions made to this account
  """
  platformContributionAvailable: Boolean!

  """
  Amount of money in cents in the currency of the collective currently available to spend
  """
  balance: Int @deprecated(reason: "2020/04/09 - Should not have been introduced. Use stats.balance.value")
  contributionPolicy: String
  email: String

  """
  If the organization if a host account, this will return the matching Host object
  """
  host: Host
}

input OrganizationCreateInput {
  name: String!
  slug: String!
  description: String!
  website: String
  settings: JSON
}

"""
PaymentMethod model
"""
type PaymentMethod {
  id: String
  legacyId: Int
  name: String
  service: PaymentMethodService
  type: PaymentMethodType

  """
  Defines the type of the payment method. Meant to be moved to "type" in the future.
  """
  providerType: PaymentMethodLegacyType @deprecated(reason: "2021-03-02: Please use service + type")

  """
  Returns the balance amount and the currency of this paymentMethod
  """
  balance: Amount!
  account: Account

  """
  For gift cards, this field will return to the source payment method
  """
  sourcePaymentMethod: PaymentMethod
  data: JSON
  limitedToHosts: [Host]
  expiryDate: ISODateTime
  createdAt: ISODateTime
}

"""
An input to use for creating or retrieving payment methods
"""
input PaymentMethodInput {
  """
  The id assigned to the payment method
  """
  id: String

  """
  Type of this payment method
  """
  type: PaymentMethodLegacyType

  """
  Type of this payment method
  """
  legacyType: PaymentMethodLegacyType
  service: PaymentMethodService
  newType: PaymentMethodType

  """
  Name of this payment method
  """
  name: String

  """
  Whether this payment method should be saved for future payments
  """
  isSavedForLater: Boolean

  """
  When creating a credit card, use this field to set its info
  """
  creditCardInfo: CreditCardCreateInput

  """
  To pass when type is PAYPAL
  """
  paypalInfo: PaypalPaymentInput
}

enum PaymentMethodLegacyType {
  ALIPAY
  CREDIT_CARD
  GIFT_CARD
  PREPAID_BUDGET
  ACCOUNT_BALANCE
  PAYPAL
  BANK_TRANSFER
  ADDED_FUNDS
}

input PaymentMethodReferenceInput {
  """
  The id assigned to the payment method
  """
  id: String
}

enum PaymentMethodService {
  PAYPAL
  STRIPE
  OPENCOLLECTIVE
  PREPAID
}

enum PaymentMethodType {
  alipay
  creditcard
  prepaid
  payment
  subscription
  collective
  host
  adaptive
  giftcard
  manual
}

"""
A payout method
"""
type PayoutMethod {
  """
  Unique identifier for this payout method
  """
  id: String!

  """
  The type of this payout method (usually the payment provider)
  """
  type: PayoutMethodType

  """
  A friendly name for users to easily find their payout methods
  """
  name: String

  """
  Whether this payout method has been saved to be used for future payouts
  """
  isSaved: Boolean

  """
  The actual data for this payout method. Content depends on the type.
  """
  data: JSON
}

input PayoutMethodInput {
  id: String
  data: JSON
  name: String
  isSaved: Boolean
  type: PayoutMethodType
}

enum PayoutMethodType {
  OTHER
  PAYPAL
  BANK_ACCOUNT
  ACCOUNT_BALANCE
  CREDIT_CARD
}

input PaypalPaymentInput {
  token: String
  data: JSON
  orderId: String
  subscriptionId: String
  isNewApi: Boolean
}

"""
A PayPal plan to associate with a contribution
"""
type PaypalPlan {
  id: String!
}

"""
Parameters for paying an expense
"""
input ProcessExpensePaymentParams {
  """
  The fee charged by payment processor in collective currency, or the fee refunded when used with MARK_AS_UNPAID
  """
  paymentProcessorFee: Int

  """
  Bypass automatic integrations (ie. PayPal, Transferwise) to process the expense manually
  """
  forceManual: Boolean

  """
  2FA code for if the host account has 2FA for payouts turned on.
  """
  twoFactorAuthenticatorCode: String
}

"""
Action taken for an account application to the host
"""
enum ProcessHostApplicationAction {
  """
  Approve the account request to be hosted
  """
  APPROVE

  """
  Rejects the account request to be hosted
  """
  REJECT

  """
  Sends a private message to the admins of the account
  """
  SEND_PRIVATE_MESSAGE

  """
  Creates a public conversation
  """
  SEND_PUBLIC_MESSAGE
}

type ProcessHostApplicationResponse {
  """
  The account that applied to the host
  """
  account: Account!

  """
  When sending a public message, this field will have the info about the conversation created
  """
  conversation: Conversation
}

"""
Action to apply on the order
"""
enum ProcessOrderAction {
  """
  To mark the order as expired
  """
  MARK_AS_EXPIRED

  """
  To mark the order as paid
  """
  MARK_AS_PAID
}

"""
This represents an Project account
"""
type Project implements Account & AccountWithHost & AccountWithContributions {
  id: String
  legacyId: Int

  """
  The slug identifying the account (ie: babel)
  """
  slug: String
  type: AccountType
  name: String
  description: String
  longDescription: String
  tags: [String]
  website: String
  twitterHandle: String
  githubHandle: String
  currency: String
  expensePolicy: String

  """
  Defines if the contributors wants to be incognito (name not displayed)
  """
  isIncognito: Boolean!
  imageUrl(height: Int, format: ImageFormat): String
  backgroundImageUrl(height: Int, format: ImageFormat): String

  """
  The time of creation
  """
  createdAt: DateTime
  updatedAt: DateTime

  """
  Returns whether this account is archived
  """
  isArchived: Boolean

  """
  Returns whether it's active: can accept financial contributions and pay expenses.
  """
  isActive: Boolean!

  """
  Returns whether the account is setup to Host collectives.
  """
  isHost: Boolean

  """
  Returns true if the remote user is an admin of this account
  """
  isAdmin: Boolean!

  """
  Get all members (admins, members, backers, followers)
  """
  members(
    limit: Int = 100
    offset: Int = 0
    role: [MemberRole]
    accountType: [AccountType]

    """
    Admin only. To filter on the email address of a member, useful to check if a member exists.
    """
    email: EmailAddress

    """
    Order of the results
    """
    orderBy: ChronologicalOrderInput! = { field: CREATED_AT, direction: ASC }
  ): MemberCollection
  memberOf(
    limit: Int
    offset: Int
    role: [MemberRole]
    accountType: [AccountType]
    account: AccountReferenceInput

    """
    Filter on whether the account is a host or not
    """
    isHostAccount: Boolean

    """
    Filter on (un)approved collectives
    """
    isApproved: Boolean

    """
    Filter on archived collectives
    """
    isArchived: Boolean

    """
    Whether incognito profiles should be included in the result. Only works if requesting user is an admin of the account.
    """
    includeIncognito: Boolean = true

    """
    A term to search membership. Searches in collective tags, name, slug, members description and role.
    """
    searchTerm: String

    """
    Filters on the Host fees structure applied to this account
    """
    hostFeesStructure: HostFeeStructure

    """
    Order of the results
    """
    orderBy: ChronologicalOrderInput! = { field: CREATED_AT, direction: ASC }
  ): MemberOfCollection
  transactions(
    type: TransactionType
    limit: Int = 100
    offset: Int = 0
    orderBy: ChronologicalOrderInput = { field: CREATED_AT, direction: DESC }

    """
    If the account is a user and this field is true, contributions from the
    incognito profile will be included too (admins only)
    """
    includeIncognitoTransactions: Boolean! = false
  ): TransactionCollection!
  orders(
    limit: Int = 100
    offset: Int = 0
    filter: AccountOrdersFilter
    status: [OrderStatus]
    tierSlug: String

    """
    Only returns orders that have an subscription (monthly/yearly)
    """
    onlySubscriptions: Boolean

    """
    Whether outgoing incognito contributions should be included. Only works when user is an admin.
    """
    includeIncognito: Boolean
    orderBy: ChronologicalOrderInput = { field: CREATED_AT, direction: DESC }
  ): OrderCollection!
  settings: JSON!
  conversations(
    limit: Int
    offset: Int

    """
    Only return conversations matching this tag
    """
    tag: String
  ): ConversationCollection

  """
  Returns conversation's tags for collective sorted by popularity
  """
  conversationsTags(limit: Int = 30): [TagStat]

  """
  Returns expense tags for collective sorted by popularity
  """
  expensesTags(limit: Int = 30): [TagStat]
  transferwise: TransferWise

  """
  The list of payout methods that this collective can use to get paid
  """
  payoutMethods: [PayoutMethod]

  """
  The list of payment methods that this collective can use to pay for Orders
  """
  paymentMethods(
    types: [String]
    type: [String]
    service: [PaymentMethodService]

    """
    Whether to include expired payment methods. Payment methods expired since more than 6 months will never be returned.
    """
    includeExpired: Boolean
  ): [PaymentMethod]!

  """
  The list of connected accounts (Stripe, Twitter, etc ...)
  """
  connectedAccounts: [ConnectedAccount]

  """
  The address associated to this account. This field is always public for collectives and events.
  """
  location: Location
  categories: [String]!
  stats: AccountStats
  updates(
    """
    The number of results to fetch (default 10, max 1000)
    """
    limit: Int = 10

    """
    The offset to use to fetch
    """
    offset: Int = 0
    onlyPublishedUpdates: Boolean
    onlyChangelogUpdates: Boolean
    orderBy: ChronologicalOrderInput! = { field: CREATED_AT, direction: DESC }
    searchTerm: String
  ): UpdateCollection!

  """
  Describes the features enabled and available for this account
  """
  features: CollectiveFeatures!
  virtualCards(
    limit: Int = 100
    offset: Int = 0
    state: String = null
    merchantAccount: AccountReferenceInput = null

    """
    Only return expenses that were created after this date
    """
    dateFrom: ISODateTime = null

    """
    Only return expenses that were created before this date
    """
    dateTo: ISODateTime = null
  ): VirtualCardCollection!
  virtualCardMerchants(limit: Int = 100, offset: Int = 0): AccountCollection!

  """
  Returns the Fiscal Host
  """
  host: Host

  """
  Describe how the host charges the collective
  """
  hostFeesStructure: HostFeeStructure

  """
  Fees percentage that the host takes for this collective
  """
  hostFeePercent: Float

  """
  How much platform fees are charged for this account
  """
  platformFeePercent: Int!

  """
  Date of approval by the Fiscal Host.
  """
  approvedAt: DateTime

  """
  Returns whether it's approved by the Fiscal Host
  """
  isApproved: Boolean!

  """
  Number of unique financial contributors.
  """
  totalFinancialContributors(
    """
    Type of account (COLLECTIVE/EVENT/ORGANIZATION/INDIVIDUAL)
    """
    accountType: AccountType
  ): Int!
  tiers: TierCollection!

  """
  All the persons and entities that contribute to this account
  """
  contributors(
    """
    The number of results to fetch (default 10, max 1000)
    """
    limit: Int = 10

    """
    The offset to use to fetch
    """
    offset: Int = 0
    roles: [MemberRole]
  ): ContributorCollection!

  """
  Returns true if a custom contribution to Open Collective can be submitted for contributions made to this account
  """
  platformContributionAvailable: Boolean!

  """
  Amount of money in cents in the currency of the account currently available to spend
  """
  balance: Int @deprecated(reason: "2020/04/09 - Should not have been introduced. Use stats.balance.value")
  contributionPolicy: String

  """
  The Account hosting this Project
  """
  parent: Account
}

input ProjectCreateInput {
  name: String!
  slug: String!
  description: String!
  tags: [String]
  settings: JSON
}

"""
This is the root query
"""
type Query {
  account(
    """
    The public id identifying the Account (ie: dgm9bnk8-0437xqry-ejpvzeol-jdayw5re)
    """
    id: String

    """
    The slug identifying the Account (ie: babel for https://opencollective.com/babel)
    """
    slug: String

    """
    The githubHandle attached to the Account (ie: babel for https://opencollective.com/babel)
    """
    githubHandle: String

    """
    If false, will return null instead of an error if the Account is not found
    """
    throwIfMissing: Boolean = true
  ): Account
  collective(
    """
    The public id identifying the Collective (ie: dgm9bnk8-0437xqry-ejpvzeol-jdayw5re)
    """
    id: String

    """
    The slug identifying the Collective (ie: babel for https://opencollective.com/babel)
    """
    slug: String

    """
    The githubHandle attached to the Collective (ie: babel for https://opencollective.com/babel)
    """
    githubHandle: String

    """
    If false, will return null instead of an error if the Collective is not found
    """
    throwIfMissing: Boolean = true
  ): Collective
  host(
    """
    The public id identifying the Host (ie: dgm9bnk8-0437xqry-ejpvzeol-jdayw5re)
    """
    id: String

    """
    The slug identifying the Host (ie: babel for https://opencollective.com/babel)
    """
    slug: String

    """
    The githubHandle attached to the Host (ie: babel for https://opencollective.com/babel)
    """
    githubHandle: String

    """
    If false, will return null instead of an error if the Host is not found
    """
    throwIfMissing: Boolean = true
  ): Host
  individual(
    """
    The public id identifying the Individual (ie: dgm9bnk8-0437xqry-ejpvzeol-jdayw5re)
    """
    id: String

    """
    The slug identifying the Individual (ie: babel for https://opencollective.com/babel)
    """
    slug: String

    """
    The githubHandle attached to the Individual (ie: babel for https://opencollective.com/babel)
    """
    githubHandle: String

    """
    If false, will return null instead of an error if the Individual is not found
    """
    throwIfMissing: Boolean = true
  ): Individual
  conversation(
    """
    The id identifying the conversation
    """
    id: String!
  ): Conversation
  expenses(
    """
    The number of results to fetch (default 10, max 1000)
    """
    limit: Int = 10

    """
    The offset to use to fetch
    """
    offset: Int = 0

    """
    Reference of the account that submitted this expense
    """
    fromAccount: AccountReferenceInput

    """
    Reference of the account where this expense was submitted
    """
    account: AccountReferenceInput

    """
    Return expenses only for this host
    """
    host: AccountReferenceInput

    """
    Use this field to filter expenses on their statuses
    """
    status: ExpenseStatusFilter

    """
    Use this field to filter expenses on their type (RECEIPT/INVOICE)
    """
    type: ExpenseType

    """
    Only expenses that match these tags
    """
    tags: [String]

    """
    Only expenses that match these tags
    """
    tag: [String]

    """
    The order of results
    """
    orderBy: ChronologicalOrderInput! = { field: CREATED_AT, direction: DESC }

    """
    Only return expenses where the amount is greater than or equal to this value (in cents)
    """
    minAmount: Int

    """
    Only return expenses where the amount is lower than or equal to this value (in cents)
    """
    maxAmount: Int

    """
    Only return expenses that use the given type as payout method
    """
    payoutMethodType: PayoutMethodType

    """
    Only return expenses that were created after this date
    """
    dateFrom: ISODateTime

    """
    Only return expenses that were created after this date
    """
    dateTo: ISODateTime

    """
    The term to search
    """
    searchTerm: String
  ): ExpenseCollection
  expense(
    """
    Public expense identifier
    """
    id: String

    """
    Identifiers to retrieve the expense.
    """
    expense: ExpenseReferenceInput

    """
    Submit-on-behalf key to access drafted Expenses
    """
    draftKey: String
  ): Expense
  hosts(
    """
    The number of results to fetch (default 10, max 1000)
    """
    limit: Int = 10

    """
    The offset to use to fetch
    """
    offset: Int = 0

    """
    Filter hosts by tags (multiple = OR)
    """
    tags: [String]

    """
    Filter hosts by tags (multiple = OR)
    """
    tag: [String]
  ): HostCollection
  order(
    """
    Identifiers to retrieve the Order
    """
    order: OrderReferenceInput!
  ): Order
  orders(
    """
    The number of results to fetch (default 10, max 1000)
    """
    limit: Int = 10

    """
    The offset to use to fetch
    """
    offset: Int = 0

    """
    Return only orders made from/to account
    """
    account: AccountReferenceInput

    """
    If account is a host, also include hosted accounts orders
    """
    includeHostedAccounts: Boolean

    """
    Account orders filter (INCOMING or OUTGOING)
    """
    filter: AccountOrdersFilter

    """
    Use this field to filter orders on their statuses
    """
    status: OrderStatus

    """
    The order of results
    """
    orderBy: ChronologicalOrderInput! = { field: CREATED_AT, direction: DESC }

    """
    Only return orders where the amount is greater than or equal to this value (in cents)
    """
    minAmount: Int

    """
    Only return orders where the amount is lower than or equal to this value (in cents)
    """
    maxAmount: Int

    """
    Only return orders that were created after this date
    """
    dateFrom: ISODateTime

    """
    Only return orders that were created after this date
    """
    dateTo: ISODateTime

    """
    The term to search
    """
    searchTerm: String
  ): OrderCollection!
  tier(
    """
    Identifiers to retrieve the tier
    """
    tier: TierReferenceInput!

    """
    If true, an error will be returned if the tier is missing
    """
    throwIfMissing: Boolean! = true
  ): Tier
  transactions(
    """
    The number of results to fetch (default 10, max 1000)
    """
    limit: Int = 10

    """
    The offset to use to fetch
    """
    offset: Int = 0

    """
    The transaction type (DEBIT or CREDIT)
    """
    type: TransactionType

    """
    Reference of the account that submitted this expense
    """
    fromAccount: AccountReferenceInput

    """
    Reference of the account where this expense was submitted
    """
    account: AccountReferenceInput

    """
    Reference of the host where this expense was submitted
    """
    host: AccountReferenceInput

    """
    Only expenses that match these tags
    """
    tags: [String]

    """
    The order of results
    """
    orderBy: ChronologicalOrderInput! = { field: CREATED_AT, direction: DESC }

    """
    Only return expenses where the amount is greater than or equal to this value (in cents)
    """
    minAmount: Int

    """
    Only return expenses where the amount is lower than or equal to this value (in cents)
    """
    maxAmount: Int

    """
    Only return expenses that were created after this date
    """
    dateFrom: ISODateTime

    """
    Only return expenses that were created before this date
    """
    dateTo: ISODateTime

    """
    The term to search
    """
    searchTerm: String

    """
    Transaction is attached to Expense
    """
    hasExpense: Boolean

    """
    Transaction is attached to Order
    """
    hasOrder: Boolean

    """
    If the account is a user and this field is true, contributions from the
    incognito profile will be included too (admins only)
    """
    includeIncognitoTransactions: Boolean! = false

    """
    Whether to include debt transactions
    """
    includeDebts: Boolean! = false

    """
    To filter by transaction kind
    """
    kinds: [TransactionKind]

    """
    To filter by transaction kind
    """
    kind: [TransactionKind]
  ): TransactionCollection
  update(
    """
    Public identifier
    """
    id: String

    """
    The update slug identifying the update
    """
    slug: String

    """
    When fetching by slug, an account must be provided
    """
    account: AccountReferenceInput
  ): Update
  paypalPlan(
    """
    The account that serves as a payment target
    """
    account: AccountReferenceInput!

    """
    The contribution amount for 1 quantity, without platform contribution and taxes
    """
    amount: AmountInput!
    frequency: ContributionFrequency!

    """
    The tier you are contributing to
    """
    tier: TierReferenceInput
  ): PaypalPlan!
  loggedInAccount: Account
}

type StripeError {
  message: String
  account: String
  response: JSON
}

"""
Statistics for a given tag
"""
type TagStat {
  """
  An unique identifier for this tag
  """
  id: String!

  """
  Name/Label of the tag
  """
  tag: String!

  """
  Number of entries for this tag
  """
  count: Int!
}

"""
Information about a tax
"""
type TaxInfo {
  """
  An unique identifier for this tax (GST, VAT, etc)
  """
  id: String!

  """
  Percentage applied, between 0-100
  """
  percentage: Int!
}

"""
Tier model
"""
type Tier {
  id: String!
  legacyId: Int!
  slug: String
  name: String
  description: String

  """
  Get all orders
  """
  orders(limit: Int = 100, offset: Int = 0, status: [OrderStatus]): OrderCollection
  amount: Amount!
  type: TierType!
  interval: TierInterval @deprecated(reason: "2020-08-24: Please use \"frequency\"")
  frequency: ContributionFrequency
  presets: [Int]
  maxQuantity: Int

  """
  Number of tickets available. Returns null if there is no limit.
  """
  availableQuantity: Int
  customFields: JSON
  amountType: TierAmountType!
  minimumAmount: Amount!
  endsAt: ISODateTime
}

enum TierAmountType {
  FIXED
  FLEXIBLE
}

"""
A collection of "Tiers"
"""
type TierCollection implements Collection {
  offset: Int
  limit: Int
  totalCount: Int
  nodes: [Tier]
}

enum TierInterval {
  month
  year
  flexible
}

input TierReferenceInput {
  """
  The id assigned to the Tier
  """
  id: String

  """
  The DB id assigned to the Tier
  """
  legacyId: Int
}

enum TierType {
  TIER
  MEMBERSHIP
  DONATION
  TICKET
  SERVICE
  PRODUCT
}

"""
Transaction interface shared by all kind of transactions (Debit, Credit)
"""
interface Transaction {
  id: String!
  legacyId: Int!
  uuid: String
  type: TransactionType
  kind: TransactionKind
  description: String
  amount: Amount!
  amountInHostCurrency: Amount!
  netAmount: Amount!
  taxAmount: Amount!

  """
  If taxAmount is set, this field will contain more info about the tax
  """
  taxInfo: TaxInfo
  platformFee: Amount!
  hostFee: Amount
  paymentProcessorFee: Amount
  host: Account
  fromAccount: Account
  toAccount: Account
  giftCardEmitterAccount: Account
  createdAt: DateTime
  updatedAt: DateTime
  expense: Expense
  order: Order
  isRefunded: Boolean
  isRefund: Boolean
  paymentMethod: PaymentMethod
  permissions: TransactionPermissions
  isOrderRejected: Boolean!
  refundTransaction: Transaction
  relatedTransactions(
    """
    Filter by kind
    """
    kind: [TransactionKind]
  ): [Transaction]!
}

"""
A collection of Transactions (Debit or Credit)
"""
type TransactionCollection implements Collection {
  offset: Int
  limit: Int
  totalCount: Int
  nodes: [Transaction]
}

enum TransactionKind {
  ADDED_FUNDS
  CONTRIBUTION
  EXPENSE
  HOST_FEE
  HOST_FEE_SHARE
  HOST_FEE_SHARE_DEBT
  PAYMENT_PROCESSOR_FEE
  PLATFORM_FEE
  PLATFORM_TIP
  PLATFORM_TIP_DEBT
  PREPAID_PAYMENT_METHOD
}

"""
Fields for the user permissions on an transaction
"""
type TransactionPermissions {
  id: String!

  """
  Whether the current user can edit the transaction
  """
  canRefund: Boolean!

  """
  Whether the current user can download this transaction's invoice
  """
  canDownloadInvoice: Boolean!

  """
  Whether the current user can reject the transaction
  """
  canReject: Boolean!
}

input TransactionReferenceInput {
  """
  The public id identifying the transaction (ie: dgm9bnk8-0437xqry-ejpvzeol-jdayw5re)
  """
  id: String

  """
  The internal id of the transaction (ie: 580)
  """
  legacyId: Int
}

"""
All transaction types
"""
enum TransactionType {
  DEBIT
  CREDIT
}

"""
TransferWise related properties for bank transfer.
"""
type TransferWise {
  """
  Unique identifier for this Wise object
  """
  id: String!
  requiredFields(
    """
    The 3 letter code identifying the currency you want to receive (ie: USD, EUR, BRL, GBP)
    """
    currency: String!

    """
    The account JSON object being validated
    """
    accountDetails: JSON
  ): [TransferWiseRequiredField]
  availableCurrencies(
    """
    Ignores blocked currencies, used to generate the bank information form for manual payments
    """
    ignoreBlockedCurrencies: Boolean
  ): [JSONObject]
}

type TransferWiseField {
  name: String
  group: [TransferWiseFieldGroup]
}

type TransferWiseFieldGroup {
  key: String
  name: String
  type: String
  required: Boolean
  refreshRequirementsOnChange: Boolean
  displayFormat: String
  example: String
  minLength: Int
  maxLength: Int
  validationRegexp: String
  validationAsync: String
  valuesAllowed: [TransferWiseFieldVatvkluesAllowed]
}

type TransferWiseFieldVatvkluesAllowed {
  key: String
  name: String
}

type TransferWiseRequiredField {
  type: String
  title: String
  fields: [TransferWiseField]
}

"""
This represents an Update
"""
type Update {
  id: String!
  legacyId: Int
  slug: String!

  """
  Indicates whether or not the user is allowed to see the content of this update
  """
  userCanSeeUpdate: Boolean!

  """
  Indicates whether or not the user is allowed to publish this update
  """
  userCanPublishUpdate: Boolean!
  isPrivate: Boolean!
  isChangelog: Boolean!
  title: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  publishedAt: DateTime
  notificationAudience: UpdateAudience

  """
  Some stats about the target audience. Will be null if the update is already
  published or if you don't have enough permissions so see this information. Not
  backed by a loader, avoid using this field in lists.
  """
  audienceStats(
    """
    To override the default notificationAudience
    """
    audience: UpdateAudience
  ): UpdateAudienceStats
  makePublicOn: DateTime
  summary: String
  html: String
  tags: [String]
  fromAccount: Account
  account: Account

  """
  Returns a map of reactions counts for this update
  """
  reactions: JSON

  """
  Returns the list of reactions added to this update by logged in user
  """
  userReactions: [String]

  """
  List the comments for this update. Not backed by a loader, don't use this in lists.
  """
  comments(limit: Int, offset: Int): CommentCollection
}

"""
Defines targets for an update
"""
enum UpdateAudience {
  """
  Will be sent to collective admins and financial contributors
  """
  ALL

  """
  Will be sent to collective admins
  """
  COLLECTIVE_ADMINS

  """
  Will be sent to financial contributors
  """
  FINANCIAL_CONTRIBUTORS
}

"""
Stats about the potential audience of an update
"""
type UpdateAudienceStats {
  id: String!
  coreContributors: Int!
  individuals: Int!
  organizations: Int!
  collectives: Int!
  hosted: Int!

  """
  The total number of emails to send
  """
  total: Int!
}

"""
A collection of "Updates"
"""
type UpdateCollection implements Collection {
  offset: Int
  limit: Int
  totalCount: Int
  nodes: [Update]
}

"""
Input type for UpdateType
"""
input UpdateCreateInput {
  title: String!
  isPrivate: Boolean
  isChangelog: Boolean
  makePublicOn: IsoDateString
  html: String!
  fromAccount: AccountReferenceInput
  account: AccountReferenceInput!
}

input UpdateReferenceInput {
  """
  The public id identifying the update
  """
  id: String
}

"""
Input type for UpdateType
"""
input UpdateUpdateInput {
  id: String!
  slug: String
  title: String
  isPrivate: Boolean
  makePublicOn: ISODateTime
  html: String
  fromAccount: AccountReferenceInput
}

"""
A field whose value conforms to the standard URL format as specified in RFC3986: https://www.ietf.org/rfc/rfc3986.txt.
"""
scalar URL

"""
This represents a Vendor account
"""
type Vendor implements Account & AccountWithHost & AccountWithContributions {
  id: String
  legacyId: Int

  """
  The slug identifying the account (ie: babel)
  """
  slug: String
  type: AccountType
  name: String
  description: String
  longDescription: String
  tags: [String]
  website: String
  twitterHandle: String
  githubHandle: String
  currency: String
  expensePolicy: String

  """
  Defines if the contributors wants to be incognito (name not displayed)
  """
  isIncognito: Boolean!
  imageUrl(height: Int, format: ImageFormat): String
  backgroundImageUrl(height: Int, format: ImageFormat): String

  """
  The time of creation
  """
  createdAt: DateTime
  updatedAt: DateTime

  """
  Returns whether this account is archived
  """
  isArchived: Boolean

  """
  Returns whether it's active: can accept financial contributions and pay expenses.
  """
  isActive: Boolean!

  """
  Returns whether the account is setup to Host collectives.
  """
  isHost: Boolean

  """
  Returns true if the remote user is an admin of this account
  """
  isAdmin: Boolean!

  """
  Get all members (admins, members, backers, followers)
  """
  members(
    limit: Int = 100
    offset: Int = 0
    role: [MemberRole]
    accountType: [AccountType]

    """
    Admin only. To filter on the email address of a member, useful to check if a member exists.
    """
    email: EmailAddress

    """
    Order of the results
    """
    orderBy: ChronologicalOrderInput! = { field: CREATED_AT, direction: ASC }
  ): MemberCollection
  memberOf(
    limit: Int
    offset: Int
    role: [MemberRole]
    accountType: [AccountType]
    account: AccountReferenceInput

    """
    Filter on whether the account is a host or not
    """
    isHostAccount: Boolean

    """
    Filter on (un)approved collectives
    """
    isApproved: Boolean

    """
    Filter on archived collectives
    """
    isArchived: Boolean

    """
    Whether incognito profiles should be included in the result. Only works if requesting user is an admin of the account.
    """
    includeIncognito: Boolean = true

    """
    A term to search membership. Searches in collective tags, name, slug, members description and role.
    """
    searchTerm: String

    """
    Filters on the Host fees structure applied to this account
    """
    hostFeesStructure: HostFeeStructure

    """
    Order of the results
    """
    orderBy: ChronologicalOrderInput! = { field: CREATED_AT, direction: ASC }
  ): MemberOfCollection
  transactions(
    type: TransactionType
    limit: Int = 100
    offset: Int = 0
    orderBy: ChronologicalOrderInput = { field: CREATED_AT, direction: DESC }

    """
    If the account is a user and this field is true, contributions from the
    incognito profile will be included too (admins only)
    """
    includeIncognitoTransactions: Boolean! = false
  ): TransactionCollection!
  orders(
    limit: Int = 100
    offset: Int = 0
    filter: AccountOrdersFilter
    status: [OrderStatus]
    tierSlug: String

    """
    Only returns orders that have an subscription (monthly/yearly)
    """
    onlySubscriptions: Boolean

    """
    Whether outgoing incognito contributions should be included. Only works when user is an admin.
    """
    includeIncognito: Boolean
    orderBy: ChronologicalOrderInput = { field: CREATED_AT, direction: DESC }
  ): OrderCollection!
  settings: JSON!
  conversations(
    limit: Int
    offset: Int

    """
    Only return conversations matching this tag
    """
    tag: String
  ): ConversationCollection

  """
  Returns conversation's tags for collective sorted by popularity
  """
  conversationsTags(limit: Int = 30): [TagStat]

  """
  Returns expense tags for collective sorted by popularity
  """
  expensesTags(limit: Int = 30): [TagStat]
  transferwise: TransferWise

  """
  The list of payout methods that this collective can use to get paid
  """
  payoutMethods: [PayoutMethod]

  """
  The list of payment methods that this collective can use to pay for Orders
  """
  paymentMethods(
    types: [String]
    type: [String]
    service: [PaymentMethodService]

    """
    Whether to include expired payment methods. Payment methods expired since more than 6 months will never be returned.
    """
    includeExpired: Boolean
  ): [PaymentMethod]!

  """
  The list of connected accounts (Stripe, Twitter, etc ...)
  """
  connectedAccounts: [ConnectedAccount]

  """
  The address associated to this account. This field is always public for collectives and events.
  """
  location: Location
  categories: [String]!
  stats: AccountStats
  updates(
    """
    The number of results to fetch (default 10, max 1000)
    """
    limit: Int = 10

    """
    The offset to use to fetch
    """
    offset: Int = 0
    onlyPublishedUpdates: Boolean
    onlyChangelogUpdates: Boolean
    orderBy: ChronologicalOrderInput! = { field: CREATED_AT, direction: DESC }
    searchTerm: String
  ): UpdateCollection!

  """
  Describes the features enabled and available for this account
  """
  features: CollectiveFeatures!
  virtualCards(
    limit: Int = 100
    offset: Int = 0
    state: String = null
    merchantAccount: AccountReferenceInput = null

    """
    Only return expenses that were created after this date
    """
    dateFrom: ISODateTime = null

    """
    Only return expenses that were created before this date
    """
    dateTo: ISODateTime = null
  ): VirtualCardCollection!
  virtualCardMerchants(limit: Int = 100, offset: Int = 0): AccountCollection!

  """
  Returns the Fiscal Host
  """
  host: Host

  """
  Describe how the host charges the collective
  """
  hostFeesStructure: HostFeeStructure

  """
  Fees percentage that the host takes for this collective
  """
  hostFeePercent: Float

  """
  How much platform fees are charged for this account
  """
  platformFeePercent: Int!

  """
  Date of approval by the Fiscal Host.
  """
  approvedAt: DateTime

  """
  Returns whether it's approved by the Fiscal Host
  """
  isApproved: Boolean!

  """
  Number of unique financial contributors.
  """
  totalFinancialContributors(
    """
    Type of account (COLLECTIVE/EVENT/ORGANIZATION/INDIVIDUAL)
    """
    accountType: AccountType
  ): Int!
  tiers: TierCollection!

  """
  All the persons and entities that contribute to this account
  """
  contributors(
    """
    The number of results to fetch (default 10, max 1000)
    """
    limit: Int = 10

    """
    The offset to use to fetch
    """
    offset: Int = 0
    roles: [MemberRole]
  ): ContributorCollection!

  """
  Returns true if a custom contribution to Open Collective can be submitted for contributions made to this account
  """
  platformContributionAvailable: Boolean!

  """
  Amount of money in cents in the currency of the account currently available to spend
  """
  balance: Int @deprecated(reason: "2020/04/09 - Should not have been introduced. Use stats.balance.value")
  contributionPolicy: String
}

"""
VirtualCard related properties.
"""
type VirtualCard {
  id: String
  account: Account
  host: Account
  assignee: Individual
  name: String
  last4: String
  data: JSONObject
  privateData: JSONObject
  createdAt: DateTime
  updatedAt: DateTime
}

"""
A collection of Virtual Cards
"""
type VirtualCardCollection implements Collection {
  offset: Int
  limit: Int
  totalCount: Int
  nodes: [VirtualCard]
}

input VirtualCardInput {
  id: String
  name: String
  last4: String
  data: JSONObject
  privateData: JSONObject
}

input VirtualCardReferenceInput {
  id: String
}

input VirtualCardUpdateInput {
  id: String
  privateData: JSONObject
}
