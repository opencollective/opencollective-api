name: CI

on:
  push:
    branches:
      - main
  pull_request:
    types:
      - opened
      - synchronize
      - reopened

env:
  TZ: UTC
  CI: true
  OC_ENV: ci
  NODE_ENV: test
  AWS_KEY: ${{ secrets.AWS_KEY }}
  AWS_SECRET: ${{ secrets.AWS_SECRET }}
  CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

jobs:
  lint:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout
        uses: actions/checkout@v2-beta

      - name: Setup node
        uses: actions/setup-node@v2
        with:
          node-version: '14.x'

      - name: Restore node_modules
        uses: actions/cache@v2
        id: api-node-modules
        with:
          path: node_modules
          key: ${{ runner.os }}-api-node-modules-${{ hashFiles('package-lock.json') }}

      - name: Restore .npm cache
        if: steps.api-node-modules.outputs.cache-hit != 'true'
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-api-npm-cache-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            - ${{ runner.os }}-api-npm-cache-${{ hashFiles('package-lock.json') }}
            - ${{ runner.os }}-api-npm-cache-

      - name: Install dependencies
        if: steps.api-node-modules.outputs.cache-hit != 'true'
        run: npm ci --prefer-offline --no-audit

      - run: npm run lint:check

  prettier:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout
        uses: actions/checkout@v2-beta

      - name: Setup node
        uses: actions/setup-node@v2
        with:
          node-version: '14.x'

      - name: Restore node_modules
        uses: actions/cache@v2
        id: api-node-modules
        with:
          path: node_modules
          key: ${{ runner.os }}-api-node-modules-${{ hashFiles('package-lock.json') }}

      - name: Restore .npm cache
        if: steps.api-node-modules.outputs.cache-hit != 'true'
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-api-npm-cache-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            - ${{ runner.os }}-api-npm-cache-${{ hashFiles('package-lock.json') }}
            - ${{ runner.os }}-api-npm-cache-

      - name: Install dependencies
        if: steps.api-node-modules.outputs.cache-hit != 'true'
        run: npm ci --prefer-offline --no-audit

      - run: npm run prettier:check

  typescript:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout
        uses: actions/checkout@v2-beta

      - name: Setup node
        uses: actions/setup-node@v2
        with:
          node-version: '14.x'

      - name: Restore node_modules
        uses: actions/cache@v2
        id: api-node-modules
        with:
          path: node_modules
          key: ${{ runner.os }}-api-node-modules-${{ hashFiles('package-lock.json') }}

      - name: Restore .npm cache
        if: steps.api-node-modules.outputs.cache-hit != 'true'
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-api-npm-cache-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            - ${{ runner.os }}-api-npm-cache-${{ hashFiles('package-lock.json') }}
            - ${{ runner.os }}-api-npm-cache-

      - name: Install dependencies
        if: steps.api-node-modules.outputs.cache-hit != 'true'
        run: npm ci --prefer-offline --no-audit

      - run: npm run type:check

  depcheck:
    runs-on: ubuntu-latest

    timeout-minutes: 15

    steps:
      - name: Checkout
        uses: actions/checkout@v2-beta

      - name: Setup node
        uses: actions/setup-node@v2
        with:
          node-version: '14.x'

      - name: Restore node_modules
        uses: actions/cache@v2
        id: api-node-modules
        with:
          path: node_modules
          key: ${{ runner.os }}-api-node-modules-${{ hashFiles('package-lock.json') }}

      - name: Restore .npm cache
        if: steps.api-node-modules.outputs.cache-hit != 'true'
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-api-npm-cache-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            - ${{ runner.os }}-api-npm-cache-${{ hashFiles('package-lock.json') }}
            - ${{ runner.os }}-api-npm-cache-

      - name: Install dependencies
        if: steps.api-node-modules.outputs.cache-hit != 'true'
        run: npm ci --prefer-offline --no-audit

      - run: npm run depcheck

  build:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout
        uses: actions/checkout@v2-beta

      - name: Setup node
        uses: actions/setup-node@v2
        with:
          node-version: '14.x'

      - name: Restore node_modules
        uses: actions/cache@v2
        id: api-node-modules
        with:
          path: node_modules
          key: ${{ runner.os }}-api-node-modules-${{ hashFiles('package-lock.json') }}

      - name: Restore .npm cache
        if: steps.api-node-modules.outputs.cache-hit != 'true'
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-api-npm-cache-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            - ${{ runner.os }}-api-npm-cache-${{ hashFiles('package-lock.json') }}
            - ${{ runner.os }}-api-npm-cache-

      - name: Install dependencies
        if: steps.api-node-modules.outputs.cache-hit != 'true'
        run: npm ci --prefer-offline --no-audit

      - name: Cache build
        uses: actions/cache@v2
        with:
          path: dist
          key: ${{ runner.os }}-api-build-${{ github.sha }}

      - name: Build
        run: npm run build

  test:
    runs-on: ubuntu-latest

    timeout-minutes: 30

    services:
      redis:
        image: redis
        ports:
          - 6379:6379
        options: --entrypoint redis-server
      postgres:
        image: postgis/postgis:13-3.1
        env:
          POSTGRES_USER: postgres
          POSTGRES_DB: postgres
          POSTGRES_HOST_AUTH_METHOD: trust
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - name: Checkout
        uses: actions/checkout@v2-beta

      - name: Setup node
        uses: actions/setup-node@v2
        with:
          node-version: '14.x'

      - name: Restore node_modules
        uses: actions/cache@v2
        id: api-node-modules
        with:
          path: node_modules
          key: ${{ runner.os }}-api-node-modules-${{ hashFiles('package-lock.json') }}

      - name: Restore .npm cache
        if: steps.api-node-modules.outputs.cache-hit != 'true'
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-api-npm-cache-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            - ${{ runner.os }}-api-npm-cache-${{ hashFiles('package-lock.json') }}
            - ${{ runner.os }}-api-npm-cache-

      - name: Install dependencies
        if: steps.api-node-modules.outputs.cache-hit != 'true'
        run: npm ci --prefer-offline --no-audit

      - run: npm run db:setup

      - run: npx nyc mocha --ignore "test/server/graphql/**"

      - run: npm run test:coverage

  test-graphql:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    services:
      redis:
        image: redis
        ports:
          - 6379:6379
        options: --entrypoint redis-server
      postgres:
        image: postgis/postgis:13-3.1
        env:
          POSTGRES_USER: postgres
          POSTGRES_DB: postgres
          POSTGRES_HOST_AUTH_METHOD: trust
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - name: Checkout
        uses: actions/checkout@v2-beta

      - name: Setup node
        uses: actions/setup-node@v2
        with:
          node-version: '14.x'

      - name: Restore node_modules
        uses: actions/cache@v2
        id: api-node-modules
        with:
          path: node_modules
          key: ${{ runner.os }}-api-node-modules-${{ hashFiles('package-lock.json') }}

      - name: Restore .npm cache
        if: steps.api-node-modules.outputs.cache-hit != 'true'
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-api-npm-cache-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            - ${{ runner.os }}-api-npm-cache-${{ hashFiles('package-lock.json') }}
            - ${{ runner.os }}-api-npm-cache-

      - name: Install dependencies
        if: steps.api-node-modules.outputs.cache-hit != 'true'
        run: npm ci --prefer-offline --no-audit

      - run: npm run db:setup

      - run: npm run test:graphql

      - run: npm run test:coverage

  schema-update:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@main

      - name: Restore node_modules
        uses: actions/cache@v2
        id: api-node-modules
        with:
          path: node_modules
          key: ${{ runner.os }}-api-node-modules-${{ hashFiles('package-lock.json') }}
      - name: Restore .npm cache
        if: steps.api-node-modules.outputs.cache-hit != 'true'
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-api-npm-cache-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            - ${{ runner.os }}-api-npm-cache-${{ hashFiles('package-lock.json') }}
            - ${{ runner.os }}-api-npm-cache-
      - name: Install dependencies
        if: steps.api-node-modules.outputs.cache-hit != 'true'
        run: npm ci --prefer-offline --no-audit
      - name: Generate & check schemas
        run: ./scripts/check-schemas.sh

  graphql-inspector:
    name: GraphQL Inspector
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis
        ports:
          - 6379:6379
        options: --entrypoint redis-server
      postgres:
        image: postgis/postgis:13-3.1
        env:
          POSTGRES_USER: postgres
          POSTGRES_DB: postgres
          POSTGRES_HOST_AUTH_METHOD: trust
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
      - name: Checkout
        uses: actions/checkout@main

      - name: GraphQL Inspector (V1)
        uses: kamilkisiela/graphql-inspector@master
        with:
          name: 'GraphQL Inspector - Schema v1'
          github-token: ${{ secrets.GITHUB_TOKEN }}
          schema: 'main:server/graphql/schemaV1.graphql'
          fail-on-breaking: false
      - name: GraphQL Inspector (V2)
        uses: kamilkisiela/graphql-inspector@master
        with:
          name: 'GraphQL Inspector - Schema v2'
          github-token: ${{ secrets.GITHUB_TOKEN }}
          schema: 'main:server/graphql/schemaV2.graphql'
          fail-on-breaking: false
